\rules {

// Same as andJIntDef, but with moduloLong.
andJLongDef {
  \schemaVar \term int left;
  \schemaVar \term int right;
  
  \find ( andJlong(left, right) )
  \replacewith ( moduloLong(binaryAnd(left, right)) )
  \heuristics ( userTaclets1 )
};

// Same as orJIntDef, but with moduloLong.
orJLongDef {
  \schemaVar \term int left;
  \schemaVar \term int right;
  
  \find ( orJlong(left, right) )
  \replacewith ( moduloLong(binaryOr(left, right)) )
  \heuristics ( userTaclets1 )
};

// x | y = 0
// This is true iff x = 0 and y = 0.
orLongZero {
    \schemaVar \term int x;
    \schemaVar \term int y;
    \assumes(inLong(x), inLong(y) ==>)
    \find( moduloLong(binaryOr(x, y)) = 0)
    \sameUpdateLevel
    \replacewith( x = 0 & y = 0 )
    \heuristics ( userTaclets2 )
};

// x & 63 = x % 64 for non-negative integers x.
// This operation removes everything bar the last 6 bits from the number.
andIntSixFour {
    \schemaVar \term int x;
    \assumes(inInt(x), x >= 0 ==>)
    \find ( moduloInt(binaryAnd(x, 63)) )
    \sameUpdateLevel
    \replacewith( moduloInt(x % 64) )
    \heuristics ( userTaclets1 )
};

//-----------------------------------------------------------------------------------------
// KeY does not appear to be able to *automatically* verify this rule. However,
// it can be verified by using the Cut rule and inserting (i = 0 | i = 1 | ... | i = 62),
// where KeY can also verify that (i >= 0 & i < 63) <-> (i = 0 | i = 1 | ... | i = 62).
removeModLongSHL {
    \schemaVar \term int i;
    \assumes( i >= 0 &  i < 63  ==> )
    \find( moduloLong(shiftleft(1, i)) )
    \sameUpdateLevel
    \replacewith( shiftleft(1,i) )
    \heuristics( userTaclets1 )
};


}

\bootclasspath "./java/";
\javaSource "./src";
\chooseContract
