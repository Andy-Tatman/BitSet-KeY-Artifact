\rules {

// Same as andJIntDef, but with moduloLong.
andJLongDef {
  \schemaVar \term int left;
  \schemaVar \term int right;
  
  \find ( andJlong(left, right) )
  \replacewith ( moduloLong(binaryAnd(left, right)) )
  \heuristics ( userTaclets1 )
};

// Same as orJIntDef, but with moduloLong.
orJLongDef {
  \schemaVar \term int left;
  \schemaVar \term int right;
  
  \find ( orJlong(left, right) )
  \replacewith ( moduloLong(binaryOr(left, right)) )
  \heuristics ( userTaclets1 )
};

// x | y = 0
// This is true iff x = 0 and y = 0.
orLongZero {
    \schemaVar \term int x;
    \schemaVar \term int y;
    \assumes(inLong(x), inLong(y) ==>)
    \find( moduloLong(binaryOr(x, y)) = 0)
    \sameUpdateLevel
    \replacewith( x = 0 & y = 0 )
    \heuristics ( userTaclets2 )
};

// x & 63 = x % 64 for non-negative x.
// This operation removes everything bar the last 6 bits from the number.
andIntSixFour {
    \schemaVar \term int x;
    \assumes(inInt(x), x >= 0 ==>)
    \find ( moduloInt(binaryAnd(x, 63)) )
    \sameUpdateLevel
    \replacewith( moduloInt(x % 64) )
    \heuristics ( userTaclets1 )
};

//-----------------------------------------------------------------------------------------
// KeY does not appear to be able to *automatically* verify these rules. However,
// it can be verified by using the Cut rule and inserting (i = 0 | i = 1 | ... | i = 63),
// where KeY can also verify that (i >= 0 & i <= 63) <-> (i = 0 | i = 1 | ... | i = 63).

// If only a single bit is set and it is not the sign bit (position 63), then no
// overflow can occur. Therefore, the moduloLong can be removed.
removeModLongSHL {
    \schemaVar \term int i;
    \assumes( i >= 0, i < 63  ==> )
    \find( moduloLong(shiftleft(1, i)) )
    \sameUpdateLevel
    \replacewith( shiftleft(1,i) )
    \heuristics( userTaclets1 )
};

PowTwoGreZero {
    \schemaVar \term int i;
    \assumes( i >= 0, i%64 < 63 ==> )
    \find( pow(2, i % 64) )
    \sameUpdateLevel
    \add( pow(2, i % 64) >= 0 & inLong(pow(2, i % 64)) ==>)
    \heuristics( userTaclets1 )
};

PowTwoNeqZero {
    \schemaVar \term int i;
    \assumes( i >= 0 ==> )
    \find( pow(2, i % 64) )
    \sameUpdateLevel
    \add( pow(2, i%64) != 0 ==>)
    \heuristics( userTaclets1 )
};

ModPowTwoNeqZero {
    \schemaVar \term int i;
    \assumes( i >= 0 ==> )
    \find( moduloLong(pow(2, i % 64)) )
    \sameUpdateLevel
    \add( moduloLong(pow(2, i%64)) != 0 ==>)
    \heuristics( userTaclets1 )
};

ModPowTwoGreZero {
    \schemaVar \term int i;
    \assumes( i >= 0, i%64 < 63 ==> )
    \find( moduloLong(pow(2, i % 64)) )
    \sameUpdateLevel
    \add( moduloLong(pow(2, i % 64)) >= 0 & inLong(moduloLong(pow(2, i % 64))) ==>)
    \heuristics( userTaclets1 )
};


//-----------------------------------------------------------------------------------------

// We set a single bit in x using binaryOr. 
binaryOrSingleBit {
    \schemaVar \term int x;
    \schemaVar \term int i;
    \assumes( inLong(x), inInt(i), i >= 0, i <= 63 ==>)
    \find( binaryOr( x, moduloLong(shiftleft(1, i)) ) )
    \sameUpdateLevel
    // bit is already set -> OR has no effect.
    "Bit already set": \replacewith(x) \add(unsignedshiftrightJlong(x, i)%2 = 1 ==>); 
    // Set the non-sign bit -> add the new bit = 2^i. i must be smaller than 63 for this.
    "Bit not yet set": \replacewith( x + pow(2, i) ) 
            \add( unsignedshiftrightJlong(x, i)%2 = 0, inLong(x + pow(2, i)), (x + pow(2, i)) <= long_MAX, i < 63 ==>); 
    // Set the sign bit -> convert the number from positive to negative 2's comp.
    // This is also only the case iff i = 63, so we add this to the list of assumptions.
    // Note: It is given that x >= 0, as otherwise the sign bit would already be set.
    "Set the sign bit": \replacewith(long_MIN + x) 
            \add(unsignedshiftrightJlong(x, i)%2 = 0, x >= 0, inLong(long_MIN + x), (long_MIN + x) < 0, i = 63 ==>) 
    \heuristics ( userTaclets2 )
};


//-----------------------------------------------------------------------------------------
// UNSIGNED shift right long:

// The normal rule, adapted from unsignedShiftRightJintDef:
unsignedShiftRightJlongDef {
  \schemaVar \term int left;
  \schemaVar \term int right;
  
  \find ( unsignedshiftrightJlong(left, right) )
  \replacewith (
    \if (left >= 0)
        \then (shiftrightJlong(left, right))
        \else (addJlong(shiftrightJlong(left, right),
                       shiftleftJlong(2,
                                     63 - right % 64)))
  )
  \heuristics ( userTaclets1 )
};


//************************************
// Less general rules, but using the information we already 'have' (namely that we
//   only work with a single bit.)


// The sign bit has been set. Depending on the value of j, we either get the sign bit
//  or we get the original value of a bit before setting the sign bit.
// Proved correct! (Using unsignedShiftRightJlongDef)
handleSignSHRLong {
    \schemaVar \term int x;
    \schemaVar \term int j;
    \assumes(inInt(j), j >= 0, j <= 63, inLong(x), x >= 0 ==>)
    \find( unsignedshiftrightJlong(long_MIN + x, j) )
    \sameUpdateLevel
    // We know that the sign bit has been set -> the bit = 0.
    "j = 63": \replacewith( 1 ) \add(j = 63 ==>);
    // The sign bit has been set, but we not isolating the sign bit -> no change 
    // compared to the orignal value.
    "j < 63": \add( unsignedshiftrightJlong(long_MIN + x, j) % 2 = unsignedshiftrightJlong(x, j) % 2, j < 63 ==>)
    \heuristics ( userTaclets2 )
};


// This still uses the info that we have (namely that x is at most altered by 1 bit) 
handleUnSHRlong {
    \schemaVar \term int x;
    \schemaVar \term int i;
    \schemaVar \term int j;

    \assumes(inLong(x), inLong(x + pow(2, i)), inInt(i), i >= 0, i < 63, inInt(j), 
                j >= 0, j <= 63, unsignedshiftrightJlong(x, i)%2 = 0 ==>)
    \find( unsignedshiftrightJlong(x + pow(2, i), j) )
    \sameUpdateLevel
    // With the SHR and the AND later, we will 'forget' the set bit.
    "i != j": \add(unsignedshiftrightJlong(x + pow(2, i), j) % 2 
                    = unsignedshiftrightJlong(x, j) % 2, i != j ==>);
    // We are looking at the set bit -> it will be set to 1.
    "i = j": \add(unsignedshiftrightJlong(x + pow(2, i), j) % 2 = 1, i = j ==>)
    \heuristics ( userTaclets2 )
};

}

\bootclasspath "./java/";
\javaSource "./src";
\chooseContract
