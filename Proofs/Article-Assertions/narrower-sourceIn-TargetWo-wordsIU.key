\programVariables {
    int fromIndex;
    int toIndex;
    int sourceIndex;
    int targetWords;
    int wordsInUse;
}

\problem {
    (0 <= fromIndex & fromIndex < toIndex & toIndex <= int_MAX 
      & sourceIndex = javaDivInt(fromIndex, 64) 
      & targetWords = javaDivInt( javaSubInt(javaSubInt(toIndex, fromIndex), 1), 64 )+1
      & targetWords <= wordsInUse // Shown in targetWords-Bound.key
      & toIndex <= wordsInUse*64
      & inInt(wordsInUse)
      // The following line makes this proof goal narrower than [sourceIn-TargetWo-wordsIU.key]:
      // (As KeY does not support binaryAnd(n, 63), we have instead used n % 64.
      //  This is equivalent for non-negative n.)
      & fromIndex%64 > (toIndex-1)%64 
    )
    ->
    ( 
      // Shows that fromIndex is in a *different* (earlier) part of the words array
      // than toIndex-1 is.
      ((fromIndex / 64) < (toIndex-1)/64) &
      sourceIndex + targetWords - 1 < wordsInUse-1
    )
}