\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue May 30 15:30:50 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:off , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]NoTypeHierarchy=false
[NewSMT]Presburger=false
[NewSMT]identifier=OPEN
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=5000
[Strategy]Timeout=-1
"
}

\bootclasspath "../../Edited-BitSet/java";

\javaSource "../../Edited-BitSet/src";

\proofObligation "#Proof Obligation Settings
#Tue May 30 15:30:50 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=java.util.BitSet[java.util.BitSet\\:\\:wordIndex(int)].JML normal_behavior operation contract.0
name=java.util.BitSet[java.util.BitSet\\:\\:wordIndex(int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "andyt" ) (keyVersion "666bcb0c95"))

(autoModeTime "118")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,0,0,0") (newnames "heapAtPre,o,f"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "6") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "6") (term "0,0,1,0,1"))
(rule "translateJavaDivInt" (formula "6") (term "0,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "assignment" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
(rule "leq_literals" (formula "3") (term "0"))
(rule "concrete_or_1" (formula "3"))
(rule "true_left" (formula "3"))
(rule "expand_divJint" (formula "5") (term "0,1,0,0,0,0,1"))
(rule "expand_moduloInteger" (formula "5") (term "0,1,0,0,0,0,1"))
(rule "replace_int_RANGE" (formula "5") (term "1,1,0,1,0,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "5") (term "0,0,1,0,1,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "5") (term "0,0,1,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "5") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "0,0,1,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "5") (term "1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "0,1,0,0,0,0,1"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_wordIndex,savedHeapBefore_wordIndex"))
(rule "simplifyUpdate2" (formula "5") (term "1"))
(rule "returnUnfold" (formula "5") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "x"))
(rule "assignmentShiftRightInt" (formula "5") (term "1"))
(rule "insert_constant_value" (formula "5") (term "1,0,0,1"))
(rule "translateJavaShiftRightInt" (formula "5") (term "0,0,1"))
(rule "sequentialToParallel2" (formula "5"))
(rule "simplifyUpdate2" (formula "5"))
(rule "simplifyUpdate3" (formula "5") (term "1,0"))
(rule "applyOnElementary" (formula "5") (term "1,0"))
(rule "applyOnRigidTerm" (formula "5") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "5") (term "1,0,1,0"))
(rule "applyOnPV" (formula "5") (term "0,0,1,0"))
(rule "javaShiftRightIntDef" (formula "5") (term "0,1,0"))
(rule "mod_axiom" (formula "5") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0"))
(rule "div_literals" (formula "5") (term "0,1,1,0,0,1,0"))
(rule "times_zero_2" (formula "5") (term "1,1,0,0,1,0"))
(rule "add_zero_right" (formula "5") (term "1,0,0,1,0"))
(rule "shiftRightDef" (formula "5") (term "0,0,1,0"))
(rule "pow_literals" (formula "5") (term "1,2,0,0,1,0"))
(rule "neg_literal" (formula "5") (term "1,1,0,0,1,0"))
(rule "less_literals" (formula "5") (term "0,0,0,1,0"))
(rule "ifthenelse_false" (formula "5") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "5") (term "0,1,0"))
(rule "replace_int_RANGE" (formula "5") (term "1,1,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "5") (term "0,0,1,0,1,0"))
(rule "replace_int_MIN" (formula "5") (term "0,0,1,0"))
(rule "methodCallReturn" (formula "5") (term "1"))
(rule "assignment" (formula "5") (term "1"))
(rule "sequentialToParallel2" (formula "5"))
(rule "simplifyUpdate2" (formula "5"))
(rule "simplifyUpdate3" (formula "5") (term "1,0"))
(rule "applyOnElementary" (formula "5") (term "1,0"))
(rule "applyOnPV" (formula "5") (term "0,1,0"))
(rule "methodCallEmpty" (formula "5") (term "1"))
(rule "tryEmpty" (formula "5") (term "1"))
(rule "emptyModality" (formula "5") (term "1"))
(rule "applyOnRigidFormula" (formula "5"))
(rule "simplifyUpdate2" (formula "5") (term "1"))
(rule "simplifyUpdate2" (formula "5") (term "0"))
(rule "applyOnRigidFormula" (formula "5") (term "1"))
(rule "applyOnRigidFormula" (formula "5") (term "0"))
(rule "simplifyUpdate2" (formula "5") (term "1,0"))
(rule "simplifyUpdate2" (formula "5") (term "0,0"))
(rule "applyOnRigidFormula" (formula "5") (term "0,1"))
(rule "applyOnRigidFormula" (formula "5") (term "1,0"))
(rule "simplifyUpdate1" (formula "5") (term "1,1,0"))
(rule "applyOnPV" (formula "5") (term "0,1,0"))
(rule "eqClose" (formula "5") (term "1,0"))
(rule "concrete_and_3" (formula "5") (term "0"))
(rule "applyOnRigidFormula" (formula "5") (term "0,0,1"))
(rule "simplifyUpdate1" (formula "5") (term "1,0,0,1"))
(rule "applyOnRigidFormula" (formula "5") (term "0"))
(rule "applyOnRigidTerm" (formula "5") (term "0,0,0,1"))
(rule "simplifyUpdate1" (formula "5") (term "2,0,0,0,1"))
(rule "simplifyUpdate1" (formula "5") (term "1,0,0,0,1"))
(rule "applyOnPV" (formula "5") (term "0,0,0,0,1"))
(rule "eqClose" (formula "5") (term "0,0,1"))
(rule "applyOnRigidFormula" (formula "5") (term "0,0"))
(rule "simplifyUpdate2" (formula "5") (term "0,0,0"))
(rule "applyOnRigidFormula" (formula "5") (term "1,0"))
(rule "simplifyUpdate2" (formula "5") (term "0,1,0"))
(rule "applyOnRigidFormula" (formula "5") (term "1,0,0"))
(rule "simplifyUpdate1" (formula "5") (term "0,1,0,0"))
(rule "eqSymm" (formula "5") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "5") (term "1,1,0"))
(rule "simplifyUpdate1" (formula "5") (term "1,1,1,0"))
(rule "applyOnPV" (formula "5") (term "0,1,1,0"))
(rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,1,1,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,1,1,0"))
(rule "add_literals" (formula "5") (term "0,0,1,1,0"))
(rule "applyOnRigidTerm" (formula "5") (term "0,1,0,0"))
(rule "applyOnPV" (formula "5") (term "1,0,1,0,0"))
(rule "simplifyUpdate1" (formula "5") (term "0,0,1,0,0"))
(rule "polySimp_homoEq" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "1,0,1,0,0"))
(rule "add_literals" (formula "5") (term "0,1,0,1,0,0"))
(rule "add_zero_left" (formula "5") (term "1,0,1,0,0"))
(rule "polySimp_addComm0" (formula "5") (term "0,1,0,0"))
(rule "polySimp_sepNegMonomial" (formula "5") (term "1,1,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,1,1,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,1,1,0"))
(rule "polySimp_sepPosMonomial" (formula "5") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
(rule "mod_homoEq" (formula "5") (term "1,0,0"))
(rule "polySimp_elimSub" (formula "5") (term "0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,0,1,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,0,1,0,0"))
(rule "all_unused" (formula "5") (term "1"))
(rule "all_unused" (formula "5") (term "1"))
(rule "concrete_and_3" (formula "5"))
(rule "andRight" (formula "5"))
(branch "Case 1"
   (rule "impRight" (formula "5"))
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
   (rule "leq_literals" (formula "5") (term "0"))
   (rule "concrete_or_1" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "div_axiom" (formula "5") (term "0,0,0,0") (inst "quotient=quotient_0"))
   (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
   (rule "qeq_literals" (formula "1") (term "0,1,1"))
   (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
   (rule "equal_literals" (formula "1") (term "0"))
   (rule "concrete_or_2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "3"))
   (rule "times_zero_1" (formula "4") (term "0,0"))
   (rule "add_zero_left" (formula "4") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "mul_literals" (formula "4") (term "1"))
   (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "4") (term "0,0"))
   (rule "concrete_or_2" (formula "4") (term "0"))
   (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0"))
   (rule "leq_literals" (formula "4") (term "0"))
   (rule "concrete_or_2" (formula "4"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "7"))
   (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
   (rule "polySimp_addComm0" (formula "2") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
   (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "2") (term "0,0"))
   (rule "concrete_or_2" (formula "2") (term "0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
   (rule "add_literals" (formula "2") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "2") (term "1,0,0"))
   (rule "add_zero_right" (formula "2") (term "0,0"))
   (rule "qeq_literals" (formula "2") (term "0"))
   (rule "concrete_or_2" (formula "2"))
   (rule "jdiv_axiom" (formula "10") (term "1,0,0"))
   (rule "eqSymm" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "7"))
   (rule "ifthenelse_true" (formula "1") (term "0"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "11") (term "1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "11") (term "1,0,0") (ifseqformula "2"))
   (rule "polySimp_pullOutFactor2" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,0,0"))
   (rule "times_zero_1" (formula "11") (term "0,0"))
   (rule "polyMod_zero" (formula "11") (term "0"))
   (rule "eqClose" (formula "11"))
   (rule "closeTrue" (formula "11"))
)
(branch "Case 2"
   (rule "impRight" (formula "5"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
   (rule "leq_literals" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
   (rule "div_literals" (formula "4") (term "1,0,0"))
   (rule "add_literals" (formula "4") (term "0,0"))
   (rule "mod_axiom" (formula "4") (term "0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
   (rule "div_literals" (formula "4") (term "0,1,0"))
   (rule "times_zero_2" (formula "4") (term "1,0"))
   (rule "add_zero_right" (formula "4") (term "0"))
   (rule "eqClose" (formula "4"))
   (rule "closeTrue" (formula "4"))
)
)
}
