\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue May 30 15:08:14 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:off , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]NoTypeHierarchy=false
[NewSMT]Presburger=false
[NewSMT]identifier=OPEN
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=5000
[Strategy]Timeout=-1
"
}

\bootclasspath "../../Edited-BitSet/java";

\javaSource "../../Edited-BitSet/src";

\proofObligation "#Proof Obligation Settings
#Tue May 30 15:08:14 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=java.util.BitSet[java.util.BitSet\\:\\:checkRange(int,int)].JML normal_behavior operation contract.0
name=java.util.BitSet[java.util.BitSet\\:\\:checkRange(int,int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "andyt" ) (keyVersion "666bcb0c95"))

(autoModeTime "65")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,1,0,0,0") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "10") (term "0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
(rule "sequentialToParallel2" (formula "10"))
(rule "simplifyUpdate3" (formula "10") (term "1,0"))
(rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
(rule "leq_literals" (formula "5") (term "0"))
(rule "concrete_or_1" (formula "5"))
(rule "true_left" (formula "5"))
(rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "6"))
(rule "leq_literals" (formula "3") (term "0"))
(rule "concrete_or_1" (formula "3"))
(rule "true_left" (formula "3"))
(rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
(rule "polySimp_mulComm0" (formula "7") (term "0,0"))
(rule "polySimp_addComm0" (formula "7") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_checkRange,savedHeapBefore_checkRange"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,1,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,1,0"))
(rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,1,0") (ifseqformula "5"))
(rule "qeq_literals" (formula "8") (term "0,0,0,1,0"))
(rule "concrete_and_2" (formula "8") (term "0,0,1,0"))
(rule "ifthenelse_false" (formula "8") (term "0,1,0"))
(rule "ifSplit" (formula "8"))
(branch "if x true"
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "boolean_not_equal_2" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x false"
   (rule "false_to_not_true" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "applyOnRigidFormula" (formula "8"))
   (rule "simplifyUpdate1" (formula "8") (term "1"))
   (rule "applyOnPV" (formula "8") (term "0"))
   (rule "boolean_not_equal_2" (formula "8"))
   (rule "false_right" (formula "8"))
   (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
   (rule "less_than_comparison_simple" (formula "8") (term "1"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "applyOnElementary" (formula "8") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,1,0"))
   (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,1,0") (ifseqformula "6"))
   (rule "qeq_literals" (formula "8") (term "0,0,0,1,0"))
   (rule "concrete_and_2" (formula "8") (term "0,0,1,0"))
   (rule "ifthenelse_false" (formula "8") (term "0,1,0"))
   (rule "ifSplit" (formula "8"))
   (branch "if x_1 true"
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_1 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "8"))
      (rule "simplifyUpdate1" (formula "8") (term "1"))
      (rule "applyOnPV" (formula "8") (term "0"))
      (rule "boolean_not_equal_2" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
      (rule "greater_than_comparison_simple" (formula "8") (term "1"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "applyOnElementary" (formula "8") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "0,0,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "8") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0"))
      (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,1,0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0,1,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,0,0,1,0"))
      (rule "leq_literals" (formula "8") (term "0,0,0,1,0"))
      (rule "concrete_and_2" (formula "8") (term "0,0,1,0"))
      (rule "ifthenelse_false" (formula "8") (term "0,1,0"))
      (rule "ifSplit" (formula "8"))
      (branch "if x_2 true"
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_2 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "8"))
         (rule "simplifyUpdate1" (formula "8") (term "1"))
         (rule "applyOnPV" (formula "8") (term "0"))
         (rule "boolean_not_equal_2" (formula "8"))
         (rule "false_right" (formula "8"))
         (rule "methodCallEmpty" (formula "8") (term "1"))
         (rule "tryEmpty" (formula "8") (term "1"))
         (rule "emptyModality" (formula "8") (term "1"))
         (rule "applyOnRigidFormula" (formula "8"))
         (rule "simplifyUpdate2" (formula "8") (term "1"))
         (rule "simplifyUpdate2" (formula "8") (term "0"))
         (rule "applyOnRigidFormula" (formula "8") (term "1"))
         (rule "applyOnRigidFormula" (formula "8") (term "0"))
         (rule "simplifyUpdate1" (formula "8") (term "1,0"))
         (rule "applyOnPV" (formula "8") (term "0,0"))
         (rule "eqClose" (formula "8") (term "0"))
         (rule "concrete_and_1" (formula "8"))
         (rule "allRight" (formula "8") (inst "sk=f_0"))
         (rule "allRight" (formula "8") (inst "sk=o_0"))
         (rule "applyOnRigidFormula" (formula "8"))
         (rule "simplifyUpdate1" (formula "8") (term "1"))
         (rule "applyOnRigidTerm" (formula "8") (term "0"))
         (rule "simplifyUpdate1" (formula "8") (term "2,0"))
         (rule "simplifyUpdate1" (formula "8") (term "1,0"))
         (rule "applyOnPV" (formula "8") (term "0,0"))
         (rule "eqClose" (formula "8"))
         (rule "closeTrue" (formula "8"))
      )
   )
)
)
}
