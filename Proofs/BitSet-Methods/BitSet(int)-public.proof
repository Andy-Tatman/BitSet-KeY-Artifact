\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue May 30 15:06:10 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:off , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]NoTypeHierarchy=false
[NewSMT]Presburger=false
[NewSMT]identifier=OPEN
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=5000
[Strategy]Timeout=-1
"
}

\bootclasspath "../../Edited-BitSet/java";

\javaSource "../../Edited-BitSet/src";

\proofObligation "#Proof Obligation Settings
#Tue May 30 15:06:10 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=java.util.BitSet[java.util.BitSet\\:\\:BitSet(int)].JML normal_behavior operation contract.0
name=java.util.BitSet[java.util.BitSet\\:\\:BitSet(int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "andyt" ) (keyVersion "666bcb0c95"))

(autoModeTime "7240")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "eqSeqEmpty" (formula "5") (term "0,0,0,0,1"))
(rule "assignment" (formula "5") (term "1"))
(rule "sequentialToParallel2" (formula "5"))
(rule "simplifyUpdate3" (formula "5") (term "1,0"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "self_1"))
(rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "5") (term "1") (inst "#v0=b"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "b"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
(rule "simplifyUpdate2" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "__NEW__"))
(rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "5") (term "1") (inst "#v0=b_1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "b_1"))
(rule "allocateInstance" (formula "5"))
(rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "replace_known_left" (formula "1") (term "0") (ifseqformula "3"))
(rule "concrete_impl_1" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "assignment_write_attribute_this" (formula "8"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "1,0,1,0"))
(rule "methodCallWithinClass" (formula "8") (term "1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "methodCallSuper" (formula "8") (term "1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "methodCallEmpty" (formula "8") (term "1"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "assignment_write_attribute_this" (formula "8"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "1,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,1,0"))
(rule "assignment_write_attribute_this" (formula "8"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "1,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,1,0"))
(rule "assignment_write_attribute_this" (formula "8"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "1,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,1,0"))
(rule "methodCallEmpty" (formula "8") (term "1"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "methodCallReturnIgnoreResult" (formula "8") (term "1"))
(rule "methodCallReturn" (formula "8") (term "1"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnPV" (formula "8") (term "0,1,0"))
(rule "methodCallEmpty" (formula "8") (term "1"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnPV" (formula "8") (term "0,1,0"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "var"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnPV" (formula "8") (term "0,1,0"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "methodCallSuper" (formula "8") (term "1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "methodCallEmpty" (formula "8") (term "1"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "assignment_write_attribute_this" (formula "8"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "1,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,1,0"))
(rule "dropEffectlessStores" (formula "8") (term "0,1,0"))
(rule "assignment_write_attribute_this" (formula "8"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "1,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,1,0"))
(rule "dropEffectlessStores" (formula "8") (term "0,1,0"))
(rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
(rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
(rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
(rule "ifSplit" (formula "8"))
(branch "if x true"
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "ifthenelse_concrete3" (formula "1"))
   (rule "boolean_not_equal_2" (formula "1") (term "1"))
   (rule "concrete_or_4" (formula "1"))
   (rule "throwUnfold" (formula "9") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "n"))
   (rule "instanceCreationAssignmentUnfoldArguments" (formula "9") (term "1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "var_1"))
   (rule "compound_addition_1" (formula "9") (term "1") (inst "#v=s"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "s"))
   (rule "expand_inInt" (formula "4"))
   (rule "replace_int_MIN" (formula "4") (term "0,1"))
   (rule "replace_int_MAX" (formula "4") (term "1,0"))
   (rule "andLeft" (formula "4"))
   (rule "inEqSimp_ltToLeq" (formula "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
   (rule "qeq_literals" (formula "7") (term "0"))
   (rule "concrete_and_2" (formula "7"))
   (rule "closeFalse" (formula "7"))
)
(branch "if x false"
   (rule "false_to_not_true" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "applyOnRigidFormula" (formula "6"))
   (rule "simplifyUpdate1" (formula "6") (term "1"))
   (rule "applyOnPV" (formula "6") (term "0"))
   (rule "ifthenelse_concrete3" (formula "6"))
   (rule "boolean_not_equal_2" (formula "6") (term "1"))
   (rule "concrete_or_4" (formula "6"))
   (rule "methodCallWithinClass" (formula "9") (term "1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "nbits_1"))
   (rule "assignment" (formula "9") (term "1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_initWords,savedHeapBefore_initWords"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "eval_order_access4" (formula "9") (term "1") (inst "#v1=x_arr") (inst "#v0=b"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_2"))
   (rule "assignment" (formula "9") (term "1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr"))
   (rule "arrayCreation" (formula "9") (term "1") (inst "#v0=x_arr_1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr_1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "dim0"))
   (rule "compound_addition_1" (formula "9") (term "1") (inst "#v=x"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "9") (term "1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "var_1"))
   (rule "assignmentSubtractionInt" (formula "9") (term "1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "9") (term "0,0,1,0"))
    (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_wordIndex,result,exc_0") (contract "java.util.BitSet[java.util.BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
   (branch "Post (wordIndex)"
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate2" (formula "6") (term "1"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "eqSymm" (formula "7") (term "1,1"))
      (rule "translateJavaDivInt" (formula "7") (term "0,1,1"))
      (rule "applyOnRigidFormula" (formula "8"))
      (rule "simplifyUpdate2" (formula "8") (term "1"))
      (rule "applyOnRigidFormula" (formula "7"))
      (rule "applyOnRigidFormula" (formula "8") (term "0"))
      (rule "applyOnPV" (formula "8") (term "0,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "7") (term "0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0"))
      (rule "applyOnPV" (formula "7") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "7") (term "1"))
      (rule "simplifyUpdate1" (formula "7") (term "1,1"))
      (rule "applyOnRigidTerm" (formula "7") (term "0,1"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0,1"))
      (rule "applyOnPV" (formula "7") (term "0,0,1"))
      (rule "assignment" (formula "13") (term "1"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "blockEmpty" (formula "13") (term "1"))
      (rule "assignmentAdditionInt" (formula "13") (term "1"))
      (rule "translateJavaAddInt" (formula "13") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "applyOnElementary" (formula "13") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
      (rule "applyOnPV" (formula "13") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
      (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
      (rule "less_than_comparison_simple" (formula "13") (term "1"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "applyOnElementary" (formula "13") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
      (rule "ifSplit" (formula "13"))
      (branch "if x_2 true"
         (rule "simplifyUpdate2" (formula "14"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "blockThrow" (formula "14") (term "1"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "throwUnfold" (formula "14") (term "1") (inst "#v0=n"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "n"))
          (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_NegativeArraySizeException,self_0,exc_1,heapAfter_NegativeArraySizeException,anon_heap_NegativeArraySizeException") (contract "java.lang.NegativeArraySizeException[java.lang.NegativeArraySizeException::NegativeArraySizeException()].JML behavior operation contract.0"))
         (branch "Post (NegativeArraySizeException)"
            (rule "instanceof_static_type" (formula "12") (term "0,0,0,1,1,1,1,1,1,1"))
            (rule "boolean_equal" (formula "12") (term "0,0,1,1,1,1,1,1,1"))
            (rule "concrete_impl_1" (formula "12") (term "0,1,1,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "12"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "simplifyUpdate2" (formula "12"))
            (rule "applyOnSkip" (formula "12") (term "1,0"))
            (rule "parallelWithSkip2" (formula "12") (term "0"))
            (rule "applyOnElementary" (formula "13") (term "1,0"))
            (rule "applyOnPV" (formula "13") (term "0,1,0"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "notLeft" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "applyOnRigidFormula" (formula "12"))
            (rule "simplifyUpdate1" (formula "12") (term "1"))
            (rule "applyOnRigidFormula" (formula "17"))
            (rule "simplifyUpdate2" (formula "17") (term "0"))
            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "13"))
            (rule "concrete_not_1" (formula "17") (term "0"))
            (rule "concrete_impl_2" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate2" (formula "16") (term "0"))
            (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "13"))
            (rule "concrete_impl_1" (formula "16"))
            (rule "applyOnRigidFormula" (formula "14"))
            (rule "simplifyUpdate1" (formula "14") (term "1"))
            (rule "applyOnRigidFormula" (formula "17"))
            (rule "simplifyUpdate1" (formula "17") (term "1"))
            (rule "applyOnRigidTerm" (formula "12") (term "0"))
            (rule "applyOnPV" (formula "12") (term "0,0"))
            (rule "simplifyUpdate1" (formula "12") (term "2,0"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate1" (formula "16") (term "1"))
            (rule "applyOnPV" (formula "16") (term "0"))
            (rule "applyOnRigidTerm" (formula "14") (term "0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "2,0"))
            (rule "applyOnPV" (formula "14") (term "0,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (ifseqformula "12"))
            (rule "applyOnRigidTerm" (formula "17") (term "0"))
            (rule "applyOnPV" (formula "17") (term "0,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "2,0"))
            (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "17"))
            (rule "concrete_or_2" (formula "14"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,1,0"))
            (rule "dismissNonSelectedField" (formula "17") (term "0"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,1,0"))
            (rule "applyOnPV" (formula "12") (term "0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "17") (term "0"))
            (rule "dismissNonSelectedField" (formula "17") (term "0"))
            (rule "dismissNonSelectedField" (formula "17") (term "0"))
            (rule "assignment" (formula "22") (term "1"))
            (rule "sequentialToParallel2" (formula "22"))
            (rule "simplifyUpdate3" (formula "22") (term "1,0"))
            (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=java_lang_Object_created__0"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "equalUnique" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "replace_known_right" (formula "1") (term "0,1,0,0") (ifseqformula "22"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
            (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "19"))
            (rule "concrete_and_4" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0001_1" (formula "17") (term "0"))
            (rule "methodCallThrow" (formula "22") (term "1"))
            (rule "simplifyUpdate2" (formula "22"))
            (rule "blockThrow" (formula "22") (term "1"))
            (rule "methodCallThrow" (formula "22") (term "1"))
            (rule "blockThrow" (formula "22") (term "1"))
            (rule "tryCatchThrow" (formula "22") (term "1"))
            (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_3"))
            (rule "equality_comparison_simple" (formula "22") (term "1"))
            (rule "sequentialToParallel2" (formula "22"))
            (rule "simplifyUpdate3" (formula "22") (term "1,0"))
            (rule "applyOnElementary" (formula "22") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
            (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "18"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
            (rule "ifElseSplit" (formula "22"))
            (branch "if x_3 true"
               (rule "simplifyUpdate2" (formula "23"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_3 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "23"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "17"))
               (rule "simplifyUpdate1" (formula "17") (term "1"))
               (rule "applyOnPV" (formula "17") (term "0"))
               (rule "boolean_not_equal_2" (formula "17"))
               (rule "false_right" (formula "17"))
               (rule "elim_double_block" (formula "22") (term "1"))
               (rule "ifElseSplit" (formula "22"))
               (branch "if n instanceof java.lang.Throwable true"
                  (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                  (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                  (rule "concrete_or_4" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "17"))
                  (rule "applyOnPV" (formula "17") (term "0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "e"))
                  (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                  (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                  (rule "boolean_equal" (formula "1") (term "1,1"))
                  (rule "concrete_or_3" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "sequentialToParallel2" (formula "22"))
                  (rule "simplifyUpdate2" (formula "22"))
                  (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                  (rule "applyOnElementary" (formula "22") (term "1,0"))
                  (rule "applyOnPV" (formula "22") (term "0,1,0"))
                  (rule "assignment" (formula "22") (term "1"))
                  (rule "sequentialToParallel2" (formula "22"))
                  (rule "simplifyUpdate2" (formula "22"))
                  (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                  (rule "applyOnElementary" (formula "22") (term "1,0"))
                  (rule "applyOnPV" (formula "22") (term "0,1,0"))
                  (rule "emptyModality" (formula "22") (term "1"))
                  (rule "expand_inInt" (formula "4"))
                  (rule "expand_inInt" (formula "7"))
                  (rule "replace_int_MAX" (formula "4") (term "1,0"))
                  (rule "replace_int_MIN" (formula "4") (term "0,1"))
                  (rule "replace_int_MIN" (formula "7") (term "0,1"))
                  (rule "replace_int_MAX" (formula "7") (term "1,0"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "8"))
                  (rule "applyOnRigidFormula" (formula "24"))
                  (rule "simplifyUpdate2" (formula "24") (term "0"))
                  (rule "simplifyUpdate2" (formula "24") (term "1"))
                  (rule "inEqSimp_ltRight" (formula "21"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyOnRigidFormula" (formula "23") (term "0"))
                  (rule "simplifyUpdate2" (formula "23") (term "1,0"))
                  (rule "simplifyUpdate2" (formula "23") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "23") (term "1"))
                  (rule "applyOnRigidFormula" (formula "23") (term "1,0"))
                  (rule "simplifyUpdate1" (formula "23") (term "1,1,0"))
                  (rule "applyOnPV" (formula "23") (term "0,1,0"))
                  (rule "replace_known_right" (formula "23") (term "1,0") (ifseqformula "20"))
                  (rule "concrete_and_4" (formula "23") (term "0"))
                  (rule "concrete_and_2" (formula "23"))
                  (rule "false_right" (formula "23"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                  (rule "leq_literals" (formula "5") (term "0"))
                  (rule "concrete_or_1" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "expand_subJint" (formula "9") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                  (rule "expand_subJint" (formula "9") (term "0,0,1"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
                  (rule "expand_subJint" (formula "10") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "0,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
                  (rule "expand_addJint" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "expand_moduloInteger" (formula "9") (term "0,0"))
                  (rule "replace_int_MIN" (formula "9") (term "0,0,0"))
                  (rule "replace_int_RANGE" (formula "9") (term "1,1,0,0"))
                  (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                  (rule "mod_axiom" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                  (rule "expand_moduloInteger" (formula "9") (term "0,0,1"))
                  (rule "replace_int_MIN" (formula "9") (term "0,0,0,1"))
                  (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,0,0,1"))
                  (rule "replace_int_RANGE" (formula "9") (term "1,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,1,0,0,1"))
                  (rule "mod_axiom" (formula "9") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,1"))
                  (rule "expand_moduloInteger" (formula "10") (term "0,0"))
                  (rule "replace_int_HALFRANGE" (formula "10") (term "0,0,1,0,0"))
                  (rule "replace_int_RANGE" (formula "10") (term "1,1,0,0"))
                  (rule "replace_int_MIN" (formula "10") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "10") (term "0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0"))
                  (rule "mod_axiom" (formula "10") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "10") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0"))
                  (rule "expand_moduloInteger" (formula "1") (term "0"))
                  (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0"))
                  (rule "replace_int_MIN" (formula "1") (term "0,0"))
                  (rule "replace_int_RANGE" (formula "1") (term "1,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "mod_axiom" (formula "1") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polyDiv_pullOut" (formula "1") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,0"))
                  (rule "equal_literals" (formula "1") (term "0,0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "expand_divJint" (formula "9") (term "0,1"))
                  (rule "expand_moduloInteger" (formula "9") (term "0,1"))
                  (rule "replace_int_RANGE" (formula "9") (term "1,1,0,1"))
                  (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,0,1"))
                  (rule "replace_int_MIN" (formula "9") (term "0,0,1"))
                  (rule "polySimp_homoEq" (formula "9") (term "1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "9") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,1"))
                  (rule "div_axiom" (formula "9") (term "0,0,0") (inst "quotient=quotient_0"))
                  (rule "qeq_literals" (formula "9") (term "0,1,1"))
                  (rule "ifthenelse_true_for" (formula "9") (term "1,1"))
                  (rule "equal_literals" (formula "9") (term "0"))
                  (rule "concrete_or_2" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1,1,1"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,1"))
                  (rule "add_literals" (formula "11") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "1"))
                  (rule "add_literals" (formula "11") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                  (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "9"))
                  (rule "eqSymm" (formula "13") (term "0"))
                  (rule "applyEq" (formula "12") (term "0,1,0,1,0,0,1") (ifseqformula "9"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "11"))
                  (rule "mul_literals" (formula "6") (term "0,0"))
                  (rule "add_zero_left" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                  (rule "concrete_or_2" (formula "6") (term "0"))
                  (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "leq_literals" (formula "6") (term "0"))
                  (rule "concrete_or_2" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "4"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "add_literals" (formula "11") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "neg_literal" (formula "11") (term "0,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "11") (term "0,0"))
                  (rule "concrete_or_2" (formula "11") (term "0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0"))
                  (rule "qeq_literals" (formula "11") (term "0"))
                  (rule "concrete_or_2" (formula "11"))
                  (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "11"))
                  (rule "applyEqRigid" (formula "14") (term "0,1,1") (ifseqformula "6"))
                  (rule "times_zero_2" (formula "14") (term "1,1"))
                  (rule "add_zero_right" (formula "14") (term "1"))
                  (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "6"))
                  (rule "leq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "applyEq" (formula "11") (term "0,1,1") (ifseqformula "6"))
                  (rule "mul_literals" (formula "11") (term "1,1"))
                  (rule "add_literals" (formula "11") (term "1"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,1,0") (ifseqformula "6"))
                  (rule "mul_literals" (formula "13") (term "1,1,0"))
                  (rule "add_zero_right" (formula "13") (term "1,0"))
                  (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "6"))
                  (rule "times_zero_2" (formula "14") (term "1,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,1,0,0,1") (ifseqformula "6"))
                  (rule "times_zero_2" (formula "13") (term "1,0,0,1,0,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,1"))
                  (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "7"))
                  (rule "leq_literals" (formula "11") (term "0"))
                  (rule "concrete_or_1" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "4"))
                  (rule "leq_literals" (formula "11") (term "0"))
                  (rule "concrete_or_1" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_1"))
                  (rule "equal_literals" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                  (rule "ifthenelse_true_for" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1,1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "3") (term "1"))
                  (rule "add_literals" (formula "3") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                  (rule "concrete_or_1" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_invertInEq1" (formula "2"))
                  (rule "times_zero_2" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                  (rule "leq_literals" (formula "2") (term "0,0"))
                  (rule "concrete_or_2" (formula "2") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                  (rule "neg_literal" (formula "2") (term "0,0,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                  (rule "concrete_or_2" (formula "2"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "4"))
                  (rule "mul_literals" (formula "12") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                  (rule "concrete_or_2" (formula "12") (term "0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                  (rule "concrete_or_2" (formula "12"))
                  (rule "jdiv_axiom" (formula "15") (term "1,0,0,1"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0,0,2,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,0,2,0"))
                  (rule "mul_literals" (formula "15") (term "0,0,0,2,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
                  (rule "mul_literals" (formula "15") (term "1,0,0"))
                  (rule "cut_direct" (formula "16") (term "0"))
                  (branch "CUT: nbits >= 1 TRUE"
                     (rule "concrete_impl_1" (formula "17"))
                     (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "16"))
                     (rule "ifthenelse_true" (formula "15") (term "0"))
                     (rule "eqSymm" (formula "15"))
                     (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "15"))
                     (rule "inEqSimp_contradEq7" (formula "18") (term "0") (ifseqformula "16"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0"))
                     (rule "leq_literals" (formula "18") (term "0,0"))
                     (rule "concrete_and_2" (formula "18") (term "0"))
                     (rule "concrete_impl_2" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "div_axiom" (formula "14") (term "1") (inst "quotient=quotient_2"))
                     (rule "mul_literals" (formula "14") (term "1,1,1,1,1"))
                     (rule "qeq_literals" (formula "14") (term "0,1,1"))
                     (rule "ifthenelse_true_for" (formula "14") (term "1,1"))
                     (rule "equal_literals" (formula "14") (term "0"))
                     (rule "concrete_or_2" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                     (rule "add_literals" (formula "16") (term "0,0,1"))
                     (rule "add_zero_left" (formula "16") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "1"))
                     (rule "inEqSimp_homoInEq0" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0"))
                     (rule "applyEq" (formula "19") (term "1,0,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
                     (rule "mod_axiom" (formula "19") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,1,0"))
                     (rule "mul_literals" (formula "19") (term "0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "19") (term "0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0"))
                     (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "19"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1"))
                     (rule "polySimp_rightDist" (formula "15") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                     (rule "mul_literals" (formula "15") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1"))
                     (rule "polySimp_rightDist" (formula "16") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                     (rule "mul_literals" (formula "16") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                     (rule "mul_literals" (formula "12") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                     (rule "mul_literals" (formula "3") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                     (rule "mul_literals" (formula "10") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                     (rule "mul_literals" (formula "4") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                     (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_2),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                     (rule "equal_literals" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_sepNegMonomial" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_exactShadow0" (formula "4") (ifseqformula "12"))
                     (rule "eq_and" (formula "4") (term "0"))
                     (rule "greater_literals" (formula "4") (term "0"))
                     (rule "concrete_impl_1" (formula "4"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "12"))
                     (rule "greater_literals" (formula "4") (term "0,0"))
                     (rule "concrete_and_1" (formula "4") (term "0"))
                     (rule "mul_literals" (formula "4") (term "1,0"))
                     (rule "leq_literals" (formula "4") (term "0"))
                     (rule "concrete_or_1" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "7"))
                     (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                     (rule "concrete_or_2" (formula "15") (term "0"))
                     (rule "neg_literal" (formula "15") (term "0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0"))
                     (rule "qeq_literals" (formula "15") (term "0"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "inEqSimp_exactShadow0" (formula "10") (ifseqformula "3"))
                     (rule "eq_and" (formula "10") (term "0"))
                     (rule "greater_literals" (formula "10") (term "0"))
                     (rule "concrete_impl_1" (formula "10"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                     (rule "mul_literals" (formula "10") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "0,0"))
                     (rule "add_zero_left" (formula "10") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "times_zero_2" (formula "10") (term "1"))
                     (rule "inEqSimp_subsumption4" (formula "10") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "10") (term "0,1,0"))
                     (rule "greater_literals" (formula "10") (term "0,0"))
                     (rule "concrete_and_1" (formula "10") (term "0"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "17"))
                     (rule "mul_literals" (formula "19") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0"))
                     (rule "add_literals" (formula "19") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                     (rule "mul_literals" (formula "19") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "19") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "19") (term "0,0"))
                     (rule "concrete_or_2" (formula "19") (term "0"))
                     (rule "polySimp_addLiterals" (formula "19") (term "0,0,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0"))
                     (rule "leq_literals" (formula "19") (term "0"))
                     (rule "concrete_or_2" (formula "19"))
                     (rule "div_axiom" (formula "21") (term "0,1,1") (inst "quotient=quotient_3"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,1,1"))
                     (rule "qeq_literals" (formula "21") (term "0,1,1"))
                     (rule "ifthenelse_true_for" (formula "21") (term "1,1"))
                     (rule "equal_literals" (formula "21") (term "0"))
                     (rule "concrete_or_2" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                     (rule "add_literals" (formula "23") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "23") (term "1"))
                     (rule "add_literals" (formula "23") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "22"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "23"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "23") (term "0"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq0" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "20"))
                     (rule "inEqSimp_homoInEq1" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0"))
                     (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                     (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "19"))
                     (rule "polySimp_addComm0" (formula "22") (term "1"))
                     (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "19"))
                     (rule "polySimp_addComm0" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1"))
                     (rule "polySimp_rightDist" (formula "20") (term "1"))
                     (rule "mul_literals" (formula "20") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1"))
                     (rule "mul_literals" (formula "21") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1"))
                     (rule "greater_literals" (formula "10") (term "0"))
                     (rule "concrete_impl_1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1"))
                     (rule "mul_literals" (formula "10") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "qeq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "21"))
                     (rule "times_zero_1" (formula "17") (term "0,0"))
                     (rule "add_zero_left" (formula "17") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "17") (term "0,0"))
                     (rule "concrete_or_2" (formula "17") (term "0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "17") (term "0,0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0"))
                     (rule "leq_literals" (formula "17") (term "0"))
                     (rule "concrete_or_2" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "13"))
                     (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "21") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,0"))
                     (rule "neg_literal" (formula "21") (term "0,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "21") (term "0,0"))
                     (rule "concrete_or_2" (formula "21") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                     (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0"))
                     (rule "qeq_literals" (formula "21") (term "0"))
                     (rule "concrete_or_2" (formula "21"))
                     (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "4") (term "1,0,1"))
                     (rule "greater_literals" (formula "4") (term "0"))
                     (rule "concrete_impl_1" (formula "4"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "24"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0"))
                     (rule "qeq_literals" (formula "4") (term "0"))
                     (rule "concrete_or_1" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "21"))
                     (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "17"))
                     (rule "mul_literals" (formula "23") (term "1,1"))
                     (rule "add_zero_right" (formula "23") (term "1"))
                     (rule "applyEqRigid" (formula "24") (term "0,1,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "24") (term "1,1"))
                     (rule "add_zero_right" (formula "24") (term "1"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "17"))
                     (rule "leq_literals" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "3") (term "1,0,1"))
                     (rule "add_zero_right" (formula "3") (term "0,1"))
                     (rule "applyEq" (formula "20") (term "1") (ifseqformula "17"))
                     (rule "applyEqRigid" (formula "4") (term "0,1,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "4") (term "1,0,1"))
                     (rule "add_zero_right" (formula "4") (term "0,1"))
                     (rule "applyEq" (formula "23") (term "0,0,1") (ifseqformula "17"))
                     (rule "mul_literals" (formula "23") (term "0,1"))
                     (rule "add_zero_left" (formula "23") (term "1"))
                     (rule "applyEqRigid" (formula "1") (term "0,1") (ifseqformula "17"))
                     (rule "add_zero_left" (formula "1") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "18"))
                     (rule "leq_literals" (formula "21") (term "0"))
                     (rule "concrete_or_1" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "13"))
                     (rule "leq_literals" (formula "21") (term "0"))
                     (rule "concrete_or_1" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                     (rule "greater_literals" (formula "10") (term "0"))
                     (rule "concrete_impl_1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "19"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (rule "concrete_or_1" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "4") (term "1,0,1"))
                     (rule "greater_literals" (formula "4") (term "0"))
                     (rule "concrete_impl_1" (formula "4"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0"))
                     (rule "mul_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "14"))
                     (rule "leq_literals" (formula "4") (term "0"))
                     (rule "concrete_or_1" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "div_axiom" (formula "1") (term "0") (inst "quotient=quotient_4"))
                     (rule "qeq_literals" (formula "1") (term "0,1,1"))
                     (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                     (rule "equal_literals" (formula "1") (term "0"))
                     (rule "concrete_or_2" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                     (rule "add_literals" (formula "3") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "3") (term "1"))
                     (rule "add_literals" (formula "3") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4"))
                     (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (rule "concrete_or_1" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
                     (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                     (rule "concrete_or_2" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_2" (formula "2"))
                     (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "2"))
                     (rule "leq_literals" (formula "5") (term "0"))
                     (rule "concrete_or_1" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "5"))
                     (rule "times_zero_1" (formula "19") (term "0,0"))
                     (rule "add_zero_left" (formula "19") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                     (rule "mul_literals" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "19") (ifseqformula "2"))
                     (rule "greater_literals" (formula "19") (term "0,0"))
                     (rule "concrete_impl_1" (formula "19") (term "0"))
                     (rule "mul_literals" (formula "19") (term "0,0"))
                     (rule "qeq_literals" (formula "19") (term "0"))
                     (rule "concrete_and_2" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
                  (branch "CUT: nbits >= 1 FALSE"
                     (rule "concrete_impl_2" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "24"))
                     (rule "ifthenelse_false" (formula "15") (term "0"))
                     (rule "eqSymm" (formula "15"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (rule "concrete_or_1" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                     (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "10"))
                     (rule "concrete_impl_1" (formula "17"))
                     (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "17"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "div_literals" (formula "2") (term "0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "15") (term "0,0"))
                     (rule "div_literals" (formula "15") (term "0"))
                     (rule "eqClose" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "10"))
                     (rule "add_zero_right" (formula "15") (term "0,0"))
                     (rule "eqSymm" (formula "15"))
                     (rule "jdiv_axiom_inline" (formula "15") (term "1"))
                     (rule "div_literals" (formula "15") (term "1,1"))
                     (rule "mul_literals" (formula "15") (term "0,0,2,1"))
                     (rule "qeq_literals" (formula "15") (term "0,1"))
                     (rule "ifthenelse_false" (formula "15") (term "1"))
                     (rule "div_literals" (formula "15") (term "0,1"))
                     (rule "times_zero_2" (formula "15") (term "1"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "15"))
                     (rule "leq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "0,0"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "leq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0") (ifseqformula "1"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "add_literals" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0") (ifseqformula "1"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "add_literals" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "if n instanceof java.lang.Throwable false"
                  (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                  (rule "concrete_or_4" (formula "1") (term "0,1"))
                  (rule "double_not" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "close" (formula "19") (ifseqformula "1"))
               )
            )
         )
         (branch "Exceptional Post (NegativeArraySizeException)"
            (rule "instanceof_static_type" (formula "12") (term "0,0,0,1,1,1,1,1,1,1"))
            (rule "boolean_equal" (formula "12") (term "0,0,1,1,1,1,1,1,1"))
            (rule "concrete_impl_1" (formula "12") (term "0,1,1,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "12"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "simplifyUpdate2" (formula "12"))
            (rule "applyOnSkip" (formula "12") (term "1,0"))
            (rule "parallelWithSkip2" (formula "12") (term "0"))
            (rule "applyOnElementary" (formula "13") (term "1,0"))
            (rule "applyOnPV" (formula "13") (term "0,1,0"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "notLeft" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "notLeft" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "applyOnRigidFormula" (formula "12"))
            (rule "simplifyUpdate1" (formula "12") (term "1"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate2" (formula "16") (term "0"))
            (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "20"))
            (rule "concrete_impl_2" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate2" (formula "16") (term "0"))
            (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "19"))
            (rule "concrete_not_2" (formula "16") (term "0"))
            (rule "concrete_impl_1" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "applyOnRigidFormula" (formula "13"))
            (rule "simplifyUpdate1" (formula "13") (term "1"))
            (rule "applyOnRigidFormula" (formula "14"))
            (rule "simplifyUpdate1" (formula "14") (term "1"))
            (rule "applyOnRigidFormula" (formula "18"))
            (rule "simplifyUpdate1" (formula "18") (term "1"))
            (rule "applyOnRigidTerm" (formula "12") (term "0"))
            (rule "applyOnPV" (formula "12") (term "0,0"))
            (rule "simplifyUpdate1" (formula "12") (term "2,0"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate1" (formula "16") (term "1"))
            (rule "applyOnPV" (formula "16") (term "0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0"))
            (rule "applyOnPV" (formula "13") (term "0,0"))
            (rule "simplifyUpdate1" (formula "13") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (ifseqformula "12"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "2,0"))
            (rule "applyOnPV" (formula "14") (term "0,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (ifseqformula "12"))
            (rule "applyOnRigidTerm" (formula "18") (term "0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0"))
            (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "18"))
            (rule "concrete_or_2" (formula "14"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,1,0"))
            (rule "dismissNonSelectedField" (formula "13") (term "0,0"))
            (rule "dismissNonSelectedField" (formula "18") (term "0"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,1,0"))
            (rule "applyOnPV" (formula "12") (term "0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "13") (term "0,0"))
            (rule "dismissNonSelectedField" (formula "18") (term "0"))
            (rule "dismissNonSelectedField" (formula "13") (term "0,0"))
            (rule "dismissNonSelectedField" (formula "18") (term "0"))
            (rule "dismissNonSelectedField" (formula "13") (term "0,0"))
            (rule "dismissNonSelectedField" (formula "18") (term "0"))
            (rule "pullOutSelect" (formula "13") (term "0,0") (inst "selectSK=java_lang_Object_created__0"))
            (rule "simplifySelectOfCreate" (formula "13"))
            (rule "equalUnique" (formula "13") (term "1,0,0"))
            (rule "concrete_and_3" (formula "13") (term "0,0"))
            (rule "castDel" (formula "13") (term "1,0"))
            (rule "eqSymm" (formula "13") (term "0,0,0"))
            (rule "replace_known_right" (formula "13") (term "0,1,0,0") (ifseqformula "24"))
            (rule "concrete_not_2" (formula "13") (term "1,0,0"))
            (rule "concrete_and_3" (formula "13") (term "0,0"))
            (rule "sortsDisjointModuloNull" (formula "13") (term "0,0"))
            (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "21"))
            (rule "concrete_and_2" (formula "13") (term "0,0"))
            (rule "ifthenelse_false" (formula "13") (term "0"))
            (rule "hideAuxiliaryEq" (formula "13"))
            (rule "replaceKnownAuxiliaryConstant_taclet1001_1" (formula "13") (term "0,0"))
            (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=java_lang_Object_created__1"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "eqClose" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "replace_known_right" (formula "1") (term "0,1,0,0") (ifseqformula "24"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
            (rule "concrete_and_2" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1001_3" (formula "18") (term "0"))
            (rule "methodCallThrow" (formula "24") (term "1"))
            (rule "simplifyUpdate2" (formula "24"))
            (rule "blockThrow" (formula "24") (term "1"))
            (rule "methodCallThrow" (formula "24") (term "1"))
            (rule "blockThrow" (formula "24") (term "1"))
            (rule "tryCatchThrow" (formula "24") (term "1"))
            (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_3"))
            (rule "equality_comparison_simple" (formula "24") (term "1"))
            (rule "sequentialToParallel2" (formula "24"))
            (rule "simplifyUpdate3" (formula "24") (term "1,0"))
            (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "20"))
            (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
            (rule "ifElseSplit" (formula "24"))
            (branch "if x_3 true"
               (rule "simplifyUpdate2" (formula "25"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_3 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "25"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "18"))
               (rule "simplifyUpdate1" (formula "18") (term "1"))
               (rule "applyOnPV" (formula "18") (term "0"))
               (rule "boolean_not_equal_2" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "elim_double_block" (formula "24") (term "1"))
               (rule "ifElseSplit" (formula "24"))
               (branch "if exc_1 instanceof java.lang.Throwable true"
                  (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                  (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                  (rule "concrete_or_4" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "variableDeclaration" (formula "24") (term "1") (newnames "e"))
                  (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                  (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                  (rule "boolean_equal" (formula "1") (term "1,1"))
                  (rule "concrete_or_3" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "sequentialToParallel2" (formula "24"))
                  (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                  (rule "assignment" (formula "24") (term "1"))
                  (rule "sequentialToParallel2" (formula "24"))
                  (rule "simplifyUpdate2" (formula "24"))
                  (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                  (rule "applyOnElementary" (formula "24") (term "1,0"))
                  (rule "applyOnPV" (formula "24") (term "0,1,0"))
                  (rule "emptyModality" (formula "24") (term "1"))
                  (rule "expand_inInt" (formula "7"))
                  (rule "expand_inInt" (formula "4"))
                  (rule "replace_int_MIN" (formula "7") (term "0,1"))
                  (rule "replace_int_MAX" (formula "7") (term "1,0"))
                  (rule "replace_int_MIN" (formula "4") (term "0,1"))
                  (rule "replace_int_MAX" (formula "4") (term "1,0"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "4"))
                  (rule "applyOnRigidFormula" (formula "26"))
                  (rule "simplifyUpdate2" (formula "26") (term "0"))
                  (rule "simplifyUpdate2" (formula "26") (term "1"))
                  (rule "inEqSimp_ltRight" (formula "23"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyOnRigidFormula" (formula "25") (term "0"))
                  (rule "simplifyUpdate2" (formula "25") (term "0,0"))
                  (rule "simplifyUpdate2" (formula "25") (term "1,0"))
                  (rule "applyOnRigidFormula" (formula "25") (term "1"))
                  (rule "applyOnRigidFormula" (formula "25") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "25") (term "1,0"))
                  (rule "simplifyUpdate1" (formula "25") (term "1,1,0"))
                  (rule "applyOnPV" (formula "25") (term "0,1,0"))
                  (rule "replace_known_right" (formula "25") (term "1,0") (ifseqformula "22"))
                  (rule "concrete_and_4" (formula "25") (term "0"))
                  (rule "concrete_and_2" (formula "25"))
                  (rule "false_right" (formula "25"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                  (rule "leq_literals" (formula "5") (term "0"))
                  (rule "concrete_or_1" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "expand_divJint" (formula "9") (term "0,1"))
                  (rule "expand_subJint" (formula "10") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "0,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
                  (rule "expand_subJint" (formula "9") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                  (rule "expand_addJint" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "expand_subJint" (formula "9") (term "0,0,0,1"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,0,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0,0,1"))
                  (rule "expand_moduloInteger" (formula "10") (term "0,0"))
                  (rule "replace_int_MIN" (formula "10") (term "0,0,0"))
                  (rule "replace_int_RANGE" (formula "10") (term "1,1,0,0"))
                  (rule "replace_int_HALFRANGE" (formula "10") (term "0,0,1,0,0"))
                  (rule "polySimp_homoEq" (formula "10") (term "0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0"))
                  (rule "mod_axiom" (formula "10") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "10") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0"))
                  (rule "expand_moduloInteger" (formula "9") (term "0,0"))
                  (rule "replace_int_MIN" (formula "9") (term "0,0,0"))
                  (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,0,0"))
                  (rule "replace_int_RANGE" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                  (rule "mod_axiom" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                  (rule "expand_moduloInteger" (formula "1") (term "0"))
                  (rule "replace_int_MIN" (formula "1") (term "0,0"))
                  (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0"))
                  (rule "replace_int_RANGE" (formula "1") (term "1,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "mod_axiom" (formula "1") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polyDiv_pullOut" (formula "1") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,0"))
                  (rule "equal_literals" (formula "1") (term "0,0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "expand_moduloInteger" (formula "9") (term "0,0,0,1"))
                  (rule "replace_int_MIN" (formula "9") (term "0,0,0,0,1"))
                  (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,0,0,0,1"))
                  (rule "replace_int_RANGE" (formula "9") (term "1,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,1,0,0,0,1"))
                  (rule "mod_axiom" (formula "9") (term "1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,0,1"))
                  (rule "expand_moduloInteger" (formula "9") (term "0,1"))
                  (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,0,1"))
                  (rule "replace_int_MIN" (formula "9") (term "0,0,1"))
                  (rule "replace_int_RANGE" (formula "9") (term "1,1,0,1"))
                  (rule "polySimp_homoEq" (formula "9") (term "1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,1"))
                  (rule "polySimp_sepNegMonomial" (formula "9") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,1"))
                  (rule "div_axiom" (formula "10") (term "0,0,0") (inst "quotient=quotient_0"))
                  (rule "mul_literals" (formula "10") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "10") (term "0,1,1"))
                  (rule "ifthenelse_true_for" (formula "10") (term "1,1"))
                  (rule "equal_literals" (formula "10") (term "0"))
                  (rule "concrete_or_2" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "12") (term "1"))
                  (rule "add_literals" (formula "12") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                  (rule "applyEq" (formula "9") (term "0,1,0,1,0,0,1") (ifseqformula "10"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,1"))
                  (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "10"))
                  (rule "eqSymm" (formula "13") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "mul_literals" (formula "12") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "12"))
                  (rule "times_zero_1" (formula "6") (term "0,0"))
                  (rule "add_zero_left" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "leq_literals" (formula "6") (term "0,0"))
                  (rule "concrete_or_2" (formula "6") (term "0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "leq_literals" (formula "6") (term "0"))
                  (rule "concrete_or_2" (formula "6"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "4"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                  (rule "concrete_or_2" (formula "12") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
                  (rule "neg_literal" (formula "12") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "qeq_literals" (formula "12") (term "0"))
                  (rule "concrete_or_2" (formula "12"))
                  (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "12"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "6"))
                  (rule "leq_literals" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "applyEq" (formula "14") (term "0,1,1") (ifseqformula "6"))
                  (rule "times_zero_2" (formula "14") (term "1,1"))
                  (rule "add_zero_right" (formula "14") (term "1"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "applyEqRigid" (formula "12") (term "0,1,1") (ifseqformula "6"))
                  (rule "times_zero_2" (formula "12") (term "1,1"))
                  (rule "add_zero_right" (formula "12") (term "1"))
                  (rule "applyEqRigid" (formula "10") (term "0,1,1,0") (ifseqformula "6"))
                  (rule "times_zero_2" (formula "10") (term "1,1,0"))
                  (rule "add_zero_right" (formula "10") (term "1,0"))
                  (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0,1") (ifseqformula "6"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,1"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,1"))
                  (rule "applyEq" (formula "11") (term "1") (ifseqformula "6"))
                  (rule "applyEqRigid" (formula "14") (term "0,1,0") (ifseqformula "6"))
                  (rule "times_zero_2" (formula "14") (term "1,0"))
                  (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "4"))
                  (rule "leq_literals" (formula "13") (term "0"))
                  (rule "concrete_or_1" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "7"))
                  (rule "leq_literals" (formula "12") (term "0"))
                  (rule "concrete_or_1" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "cut_direct" (formula "16") (term "0"))
                  (branch "CUT: exc_1.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "cut_direct" (formula "20") (term "1"))
                     (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                        (rule "instanceof_not_compatible_5" (formula "21") (term "0") (ifseqformula "20"))
                        (rule "concrete_or_3" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "2"))
                        (rule "times_zero_2" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                        (rule "leq_literals" (formula "2") (term "0,0"))
                        (rule "concrete_or_2" (formula "2") (term "0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                        (rule "neg_literal" (formula "2") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "jdiv_axiom" (formula "14") (term "1,0,0,1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,2,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: nbits >= 1 TRUE"
                           (rule "concrete_impl_1" (formula "16"))
                           (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "15"))
                           (rule "ifthenelse_true" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_contradEq7" (formula "18") (term "0") (ifseqformula "15"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_and_2" (formula "18") (term "0"))
                           (rule "concrete_impl_2" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "15"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "div_axiom" (formula "13") (term "1") (inst "quotient=quotient_2"))
                           (rule "mul_literals" (formula "13") (term "1,1,1,1,1"))
                           (rule "equal_literals" (formula "13") (term "0"))
                           (rule "concrete_or_2" (formula "13"))
                           (rule "qeq_literals" (formula "13") (term "0,1"))
                           (rule "ifthenelse_true_for" (formula "13") (term "1"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                           (rule "add_literals" (formula "15") (term "0,0,1"))
                           (rule "add_zero_left" (formula "15") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1"))
                           (rule "inEqSimp_homoInEq0" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
                           (rule "mod_axiom" (formula "18") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "polySimp_mulAssoc" (formula "18") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,1"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "18"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                           (rule "mul_literals" (formula "14") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                           (rule "mul_literals" (formula "4") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                           (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_2),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                           (rule "equal_literals" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "polySimp_homoEq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                           (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "14") (term "0,0"))
                           (rule "concrete_or_2" (formula "14") (term "0"))
                           (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                           (rule "concrete_or_2" (formula "14"))
                           (rule "inEqSimp_exactShadow0" (formula "4") (ifseqformula "12"))
                           (rule "eq_and" (formula "4") (term "0"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "12"))
                           (rule "mul_literals" (formula "4") (term "1,1,0"))
                           (rule "greater_literals" (formula "4") (term "0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow0" (formula "10") (ifseqformula "3"))
                           (rule "eq_and" (formula "10") (term "0"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "0,0"))
                           (rule "add_zero_left" (formula "10") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "10"))
                           (rule "times_zero_2" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "inEqSimp_subsumption4" (formula "10") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "10") (term "0,1,0"))
                           (rule "greater_literals" (formula "10") (term "0,0"))
                           (rule "concrete_and_1" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "16"))
                           (rule "mul_literals" (formula "18") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_or_2" (formula "18") (term "0"))
                           (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "leq_literals" (formula "18") (term "0"))
                           (rule "concrete_or_2" (formula "18"))
                           (rule "div_axiom" (formula "20") (term "0,1,1") (inst "quotient=quotient_3"))
                           (rule "equal_literals" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,1"))
                           (rule "qeq_literals" (formula "20") (term "0,1"))
                           (rule "ifthenelse_true_for" (formula "20") (term "1"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "22") (term "1"))
                           (rule "add_literals" (formula "22") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "21"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "22"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0"))
                           (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEqRigid" (formula "11") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0"))
                           (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "21") (term "1"))
                           (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1"))
                           (rule "mul_literals" (formula "20") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "20"))
                           (rule "mul_literals" (formula "16") (term "0,0"))
                           (rule "add_zero_left" (formula "16") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "16") (term "0,0"))
                           (rule "concrete_or_2" (formula "16") (term "0"))
                           (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "leq_literals" (formula "16") (term "0"))
                           (rule "concrete_or_2" (formula "16"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "4") (term "1,0,1"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "22"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,1"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "20") (term "0,0"))
                           (rule "concrete_or_2" (formula "20") (term "0"))
                           (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
                           (rule "neg_literal" (formula "20") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "qeq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "20"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "21") (term "1,1"))
                           (rule "add_zero_right" (formula "21") (term "1"))
                           (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "16"))
                           (rule "mul_literals" (formula "22") (term "1,1"))
                           (rule "add_zero_right" (formula "22") (term "1"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "16"))
                           (rule "leq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEq" (formula "3") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "mul_literals" (formula "3") (term "1,0,1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "applyEqRigid" (formula "19") (term "1") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "4") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "4") (term "1,0,1"))
                           (rule "add_zero_right" (formula "4") (term "0,1"))
                           (rule "applyEqRigid" (formula "1") (term "0,1") (ifseqformula "16"))
                           (rule "add_zero_left" (formula "1") (term "1"))
                           (rule "applyEqRigid" (formula "22") (term "0,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "22") (term "0,1"))
                           (rule "add_zero_left" (formula "22") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "12"))
                           (rule "leq_literals" (formula "21") (term "0"))
                           (rule "concrete_or_1" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "17"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,1"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "18"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "4") (term "1,0,1"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "mul_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "13"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "div_axiom" (formula "1") (term "0") (inst "quotient=quotient_4"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1,1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "5"))
                           (rule "mul_literals" (formula "18") (term "0,0"))
                           (rule "add_zero_left" (formula "18") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_or_2" (formula "18") (term "0"))
                           (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "leq_literals" (formula "18") (term "0"))
                           (rule "concrete_or_2" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "18"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (rule "concrete_or_1" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "18"))
                           (rule "greater_literals" (formula "2") (term "0,0"))
                           (rule "concrete_impl_1" (formula "2") (term "0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (rule "concrete_and_2" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: nbits >= 1 FALSE"
                           (rule "concrete_impl_2" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "25"))
                           (rule "ifthenelse_false" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "10"))
                           (rule "concrete_impl_1" (formula "17"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "15"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "div_literals" (formula "1") (term "0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "9"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "eqSymm" (formula "13"))
                           (rule "jdiv_axiom_inline" (formula "13") (term "1"))
                           (rule "qeq_literals" (formula "13") (term "0,1"))
                           (rule "ifthenelse_false" (formula "13") (term "1"))
                           (rule "mul_literals" (formula "13") (term "0,0,1"))
                           (rule "div_literals" (formula "13") (term "0,1"))
                           (rule "times_zero_2" (formula "13") (term "1"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "15"))
                           (rule "leq_literals" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "9"))
                           (rule "add_zero_right" (formula "12") (term "0,0"))
                           (rule "div_literals" (formula "12") (term "0"))
                           (rule "eqClose" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "12"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "12"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                        (rule "concrete_or_4" (formula "20"))
                        (rule "instanceof_not_compatible_5" (formula "21") (ifseqformula "20"))
                        (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "2"))
                        (rule "times_zero_2" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                        (rule "leq_literals" (formula "2") (term "0,0"))
                        (rule "concrete_or_2" (formula "2") (term "0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                        (rule "neg_literal" (formula "2") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "jdiv_axiom" (formula "14") (term "1,0,0,1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,2,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: nbits >= 1 TRUE"
                           (rule "concrete_impl_1" (formula "16"))
                           (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "15"))
                           (rule "ifthenelse_true" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_contradEq7" (formula "18") (term "0") (ifseqformula "15"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_and_2" (formula "18") (term "0"))
                           (rule "concrete_impl_2" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "15"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "div_axiom" (formula "13") (term "1") (inst "quotient=quotient_2"))
                           (rule "mul_literals" (formula "13") (term "1,1,1,1,1"))
                           (rule "equal_literals" (formula "13") (term "0"))
                           (rule "concrete_or_2" (formula "13"))
                           (rule "qeq_literals" (formula "13") (term "0,1"))
                           (rule "ifthenelse_true_for" (formula "13") (term "1"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                           (rule "add_literals" (formula "15") (term "0,0,1"))
                           (rule "add_zero_left" (formula "15") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1"))
                           (rule "inEqSimp_homoInEq0" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
                           (rule "mod_axiom" (formula "18") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "polySimp_mulAssoc" (formula "18") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,1"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "18"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                           (rule "mul_literals" (formula "14") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                           (rule "mul_literals" (formula "4") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                           (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_2),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                           (rule "equal_literals" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "polySimp_homoEq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow0" (formula "4") (ifseqformula "12"))
                           (rule "eq_and" (formula "4") (term "0"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "12"))
                           (rule "greater_literals" (formula "4") (term "0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "15"))
                           (rule "mul_literals" (formula "17") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0"))
                           (rule "add_literals" (formula "17") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                           (rule "mul_literals" (formula "17") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "17") (term "0,0"))
                           (rule "concrete_or_2" (formula "17") (term "0"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                           (rule "add_literals" (formula "17") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0"))
                           (rule "leq_literals" (formula "17") (term "0"))
                           (rule "concrete_or_2" (formula "17"))
                           (rule "inEqSimp_exactShadow0" (formula "10") (ifseqformula "3"))
                           (rule "eq_and" (formula "10") (term "0"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "0,0"))
                           (rule "add_zero_left" (formula "10") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "10"))
                           (rule "times_zero_2" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "inEqSimp_subsumption4" (formula "10") (ifseqformula "2"))
                           (rule "mul_literals" (formula "10") (term "0,1,0"))
                           (rule "greater_literals" (formula "10") (term "0,0"))
                           (rule "concrete_and_1" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                           (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                           (rule "mul_literals" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                           (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "14") (term "0,0"))
                           (rule "concrete_or_2" (formula "14") (term "0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                           (rule "concrete_or_2" (formula "14"))
                           (rule "div_axiom" (formula "20") (term "0,1,1") (inst "quotient=quotient_3"))
                           (rule "equal_literals" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "mul_literals" (formula "20") (term "1,1,1,1"))
                           (rule "qeq_literals" (formula "20") (term "0,1"))
                           (rule "ifthenelse_true_for" (formula "20") (term "1"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "22") (term "1"))
                           (rule "add_literals" (formula "22") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "21"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "22"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0"))
                           (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "applyEqRigid" (formula "21") (term "0,1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "21") (term "1"))
                           (rule "applyEqRigid" (formula "1") (term "1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1"))
                           (rule "mul_literals" (formula "20") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "20"))
                           (rule "mul_literals" (formula "16") (term "0,0"))
                           (rule "add_zero_left" (formula "16") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "16") (term "0,0"))
                           (rule "concrete_or_2" (formula "16") (term "0"))
                           (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "leq_literals" (formula "16") (term "0"))
                           (rule "concrete_or_2" (formula "16"))
                           (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "20") (term "0,0"))
                           (rule "concrete_or_2" (formula "20") (term "0"))
                           (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
                           (rule "neg_literal" (formula "20") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "qeq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,1"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "22"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "20"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "16"))
                           (rule "leq_literals" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "16"))
                           (rule "mul_literals" (formula "21") (term "1,1"))
                           (rule "add_zero_right" (formula "21") (term "1"))
                           (rule "applyEqRigid" (formula "20") (term "0,1,1") (ifseqformula "16"))
                           (rule "mul_literals" (formula "20") (term "1,1"))
                           (rule "add_zero_right" (formula "20") (term "1"))
                           (rule "applyEq" (formula "4") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "4") (term "1,0,1"))
                           (rule "add_zero_right" (formula "4") (term "0,1"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "1") (term "0,1") (ifseqformula "16"))
                           (rule "add_zero_left" (formula "1") (term "1"))
                           (rule "applyEqRigid" (formula "22") (term "0,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "22") (term "0,1"))
                           (rule "add_zero_left" (formula "22") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "17"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "12"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "4") (term "1,0,1"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "mul_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "13"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,1"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "18"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "div_axiom" (formula "1") (term "0") (inst "quotient=quotient_4"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1,1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
                           (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "2") (term "0,0"))
                           (rule "concrete_or_2" (formula "2") (term "0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (rule "concrete_or_2" (formula "2"))
                           (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "2"))
                           (rule "leq_literals" (formula "5") (term "0"))
                           (rule "concrete_or_1" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "5"))
                           (rule "times_zero_1" (formula "18") (term "0,0"))
                           (rule "add_zero_left" (formula "18") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "inEqSimp_contradInEq3" (formula "18") (ifseqformula "2"))
                           (rule "greater_literals" (formula "18") (term "0,0"))
                           (rule "concrete_impl_1" (formula "18") (term "0"))
                           (rule "mul_literals" (formula "18") (term "0,0"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                           (rule "concrete_and_2" (formula "18"))
                           (rule "closeFalse" (formula "18"))
                        )
                        (branch "CUT: nbits >= 1 FALSE"
                           (rule "concrete_impl_2" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "25"))
                           (rule "ifthenelse_false" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "10"))
                           (rule "concrete_impl_1" (formula "17"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "10"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "div_literals" (formula "15") (term "0"))
                           (rule "eqClose" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "15"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "15"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "div_literals" (formula "2") (term "0"))
                           (rule "eqSymm" (formula "2"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "15"))
                           (rule "inEqSimp_homoInEq0" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "0,0"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                           (rule "leq_literals" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "10"))
                           (rule "add_literals" (formula "12") (term "0,0"))
                           (rule "eqSymm" (formula "12"))
                           (rule "jdiv_axiom_inline" (formula "12") (term "1"))
                           (rule "qeq_literals" (formula "12") (term "0,1"))
                           (rule "ifthenelse_false" (formula "12") (term "1"))
                           (rule "mul_literals" (formula "12") (term "0,0,1"))
                           (rule "div_literals" (formula "12") (term "0,1"))
                           (rule "times_zero_2" (formula "12") (term "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "add_literals" (formula "4") (term "0"))
                           (rule "qeq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                  )
                  (branch "CUT: exc_1.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "16"))
                     (rule "cut_direct" (formula "20") (term "1"))
                     (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                        (rule "instanceof_not_compatible_5" (formula "21") (term "0") (ifseqformula "20"))
                        (rule "concrete_or_3" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "2") (term "0,0"))
                        (rule "concrete_or_2" (formula "2") (term "0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                        (rule "neg_literal" (formula "2") (term "0,0,0,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "jdiv_axiom" (formula "14") (term "1,0,0,1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,2,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: nbits >= 1 TRUE"
                           (rule "concrete_impl_1" (formula "16"))
                           (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "15"))
                           (rule "ifthenelse_true" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_contradEq7" (formula "18") (term "0") (ifseqformula "15"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_and_2" (formula "18") (term "0"))
                           (rule "concrete_impl_2" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "15"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "div_axiom" (formula "13") (term "1") (inst "quotient=quotient_2"))
                           (rule "equal_literals" (formula "13") (term "0"))
                           (rule "concrete_or_2" (formula "13"))
                           (rule "qeq_literals" (formula "13") (term "0,1"))
                           (rule "ifthenelse_true_for" (formula "13") (term "1"))
                           (rule "mul_literals" (formula "13") (term "1,1,1"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                           (rule "add_literals" (formula "15") (term "0,0,1"))
                           (rule "add_zero_left" (formula "15") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1"))
                           (rule "inEqSimp_homoInEq0" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
                           (rule "mod_axiom" (formula "18") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "polySimp_mulAssoc" (formula "18") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,1"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "18"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1"))
                           (rule "mul_literals" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                           (rule "mul_literals" (formula "4") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                           (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_2),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                           (rule "equal_literals" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_homoEq" (formula "1"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow0" (formula "10") (ifseqformula "3"))
                           (rule "eq_and" (formula "10") (term "0"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "0,0"))
                           (rule "add_zero_left" (formula "10") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption4" (formula "10") (ifseqformula "2"))
                           (rule "mul_literals" (formula "10") (term "0,1,0"))
                           (rule "greater_literals" (formula "10") (term "0,0"))
                           (rule "concrete_and_1" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "15"))
                           (rule "mul_literals" (formula "17") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0"))
                           (rule "add_literals" (formula "17") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                           (rule "mul_literals" (formula "17") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "17") (term "0,0"))
                           (rule "concrete_or_2" (formula "17") (term "0"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                           (rule "add_literals" (formula "17") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,0"))
                           (rule "leq_literals" (formula "17") (term "0"))
                           (rule "concrete_or_2" (formula "17"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                           (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                           (rule "mul_literals" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,1,0"))
                           (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "14") (term "0,0"))
                           (rule "concrete_or_2" (formula "14") (term "0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                           (rule "concrete_or_2" (formula "14"))
                           (rule "inEqSimp_exactShadow0" (formula "4") (ifseqformula "12"))
                           (rule "eq_and" (formula "4") (term "0"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "12"))
                           (rule "mul_literals" (formula "4") (term "1,1,0"))
                           (rule "greater_literals" (formula "4") (term "0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "div_axiom" (formula "20") (term "0,1,1") (inst "quotient=quotient_3"))
                           (rule "qeq_literals" (formula "20") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "20") (term "1,1"))
                           (rule "equal_literals" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "mul_literals" (formula "20") (term "1,1,1"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "22") (term "1"))
                           (rule "add_literals" (formula "22") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "21"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "22"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0"))
                           (rule "applyEqRigid" (formula "10") (term "0,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0"))
                           (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "21") (term "1"))
                           (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1"))
                           (rule "mul_literals" (formula "20") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,1"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0"))
                           (rule "add_literals" (formula "19") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "19") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "leq_literals" (formula "19") (term "0,0"))
                           (rule "concrete_or_2" (formula "19") (term "0"))
                           (rule "neg_literal" (formula "19") (term "0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "19") (term "0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0"))
                           (rule "qeq_literals" (formula "19") (term "0"))
                           (rule "concrete_or_2" (formula "19"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "22"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "21"))
                           (rule "times_zero_1" (formula "16") (term "0,0"))
                           (rule "add_zero_left" (formula "16") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "16") (term "0,0"))
                           (rule "concrete_or_2" (formula "16") (term "0"))
                           (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0"))
                           (rule "leq_literals" (formula "16") (term "0"))
                           (rule "concrete_or_2" (formula "16"))
                           (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "20"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "16"))
                           (rule "mul_literals" (formula "21") (term "1,1"))
                           (rule "add_literals" (formula "21") (term "1"))
                           (rule "applyEqRigid" (formula "22") (term "0,1,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "22") (term "1,1"))
                           (rule "add_literals" (formula "22") (term "1"))
                           (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "16"))
                           (rule "leq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEqRigid" (formula "19") (term "1") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "applyEqRigid" (formula "4") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "4") (term "1,0,1"))
                           (rule "add_zero_right" (formula "4") (term "0,1"))
                           (rule "applyEqRigid" (formula "22") (term "0,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "22") (term "0,1"))
                           (rule "add_zero_left" (formula "22") (term "1"))
                           (rule "applyEqRigid" (formula "1") (term "0,1") (ifseqformula "16"))
                           (rule "add_zero_left" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "17"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "12"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "mul_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "13"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "18"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "div_axiom" (formula "1") (term "0") (inst "quotient=quotient_4"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "5"))
                           (rule "times_zero_1" (formula "18") (term "0,0"))
                           (rule "add_zero_left" (formula "18") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_or_2" (formula "18") (term "0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0"))
                           (rule "leq_literals" (formula "18") (term "0"))
                           (rule "concrete_or_2" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "18"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (rule "concrete_or_1" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "18"))
                           (rule "greater_literals" (formula "2") (term "0,0"))
                           (rule "concrete_impl_1" (formula "2") (term "0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (rule "concrete_and_2" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: nbits >= 1 FALSE"
                           (rule "concrete_impl_2" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "25"))
                           (rule "ifthenelse_false" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "10"))
                           (rule "concrete_impl_1" (formula "17"))
                           (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "10"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "eqSymm" (formula "15"))
                           (rule "jdiv_axiom_inline" (formula "15") (term "1"))
                           (rule "qeq_literals" (formula "15") (term "0,1"))
                           (rule "ifthenelse_false" (formula "15") (term "1"))
                           (rule "mul_literals" (formula "15") (term "0,0,1"))
                           (rule "div_literals" (formula "15") (term "0,1"))
                           (rule "times_zero_2" (formula "15") (term "1"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
                           (rule "leq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "13"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "13"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "div_literals" (formula "1") (term "0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "9"))
                           (rule "add_zero_right" (formula "12") (term "0,0"))
                           (rule "div_literals" (formula "12") (term "0"))
                           (rule "eqClose" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                        (rule "concrete_or_4" (formula "20"))
                        (rule "instanceof_not_compatible_5" (formula "21") (ifseqformula "20"))
                        (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
                        (rule "leq_literals" (formula "2") (term "0,0"))
                        (rule "concrete_or_2" (formula "2") (term "0"))
                        (rule "neg_literal" (formula "2") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "jdiv_axiom" (formula "14") (term "1,0,0,1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,2,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: nbits >= 1 TRUE"
                           (rule "concrete_impl_1" (formula "16"))
                           (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "15"))
                           (rule "ifthenelse_true" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
                           (rule "inEqSimp_contradEq7" (formula "18") (term "0") (ifseqformula "15"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_and_2" (formula "18") (term "0"))
                           (rule "concrete_impl_2" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "15"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "div_axiom" (formula "13") (term "1") (inst "quotient=quotient_2"))
                           (rule "qeq_literals" (formula "13") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "13") (term "1,1"))
                           (rule "equal_literals" (formula "13") (term "0"))
                           (rule "concrete_or_2" (formula "13"))
                           (rule "mul_literals" (formula "13") (term "1,1,1"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                           (rule "add_literals" (formula "15") (term "0,0,1"))
                           (rule "add_zero_left" (formula "15") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1"))
                           (rule "inEqSimp_homoInEq0" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
                           (rule "mod_axiom" (formula "18") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "polySimp_mulAssoc" (formula "18") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,1"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "18"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1"))
                           (rule "mul_literals" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                           (rule "mul_literals" (formula "4") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                           (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_2),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                           (rule "equal_literals" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_homoEq" (formula "1"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow0" (formula "10") (ifseqformula "3"))
                           (rule "eq_and" (formula "10") (term "0"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "0,0"))
                           (rule "add_zero_left" (formula "10") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption4" (formula "10") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "10") (term "0,1,0"))
                           (rule "greater_literals" (formula "10") (term "0,0"))
                           (rule "concrete_and_1" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                           (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,1,0"))
                           (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "14") (term "0,0"))
                           (rule "concrete_or_2" (formula "14") (term "0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                           (rule "concrete_or_2" (formula "14"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "16"))
                           (rule "mul_literals" (formula "18") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_or_2" (formula "18") (term "0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0"))
                           (rule "leq_literals" (formula "18") (term "0"))
                           (rule "concrete_or_2" (formula "18"))
                           (rule "inEqSimp_exactShadow0" (formula "4") (ifseqformula "12"))
                           (rule "eq_and" (formula "4") (term "0"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "12"))
                           (rule "mul_literals" (formula "4") (term "1,1,0"))
                           (rule "greater_literals" (formula "4") (term "0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "div_axiom" (formula "20") (term "0,1,1") (inst "quotient=quotient_3"))
                           (rule "qeq_literals" (formula "20") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "20") (term "1,1"))
                           (rule "equal_literals" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "mul_literals" (formula "20") (term "1,1,1"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                           (rule "add_literals" (formula "22") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "22") (term "1"))
                           (rule "add_literals" (formula "22") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "21"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "22"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0"))
                           (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0"))
                           (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEqRigid" (formula "21") (term "0,1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "21") (term "1"))
                           (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1"))
                           (rule "mul_literals" (formula "20") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "20"))
                           (rule "times_zero_1" (formula "16") (term "0,0"))
                           (rule "add_zero_left" (formula "16") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "16") (term "0,0"))
                           (rule "concrete_or_2" (formula "16") (term "0"))
                           (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0"))
                           (rule "leq_literals" (formula "16") (term "0"))
                           (rule "concrete_or_2" (formula "16"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "20") (term "0,0"))
                           (rule "concrete_or_2" (formula "20") (term "0"))
                           (rule "neg_literal" (formula "20") (term "0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0"))
                           (rule "qeq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "4") (term "1,0,1"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "20"))
                           (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "22") (term "1,1"))
                           (rule "add_literals" (formula "22") (term "1"))
                           (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "23") (term "1,1"))
                           (rule "add_literals" (formula "23") (term "1"))
                           (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "16"))
                           (rule "leq_literals" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "3") (term "1,0,1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "4") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "4") (term "1,0,1"))
                           (rule "add_zero_right" (formula "4") (term "0,1"))
                           (rule "applyEqRigid" (formula "22") (term "0,0,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "22") (term "0,1"))
                           (rule "add_zero_left" (formula "22") (term "1"))
                           (rule "applyEqRigid" (formula "1") (term "0,1") (ifseqformula "16"))
                           (rule "add_zero_left" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "17"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "12"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "2"))
                           (rule "greater_literals" (formula "4") (term "0"))
                           (rule "concrete_impl_1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0"))
                           (rule "mul_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "13"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "greater_literals" (formula "10") (term "0"))
                           (rule "concrete_impl_1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "18"))
                           (rule "leq_literals" (formula "10") (term "0"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "div_axiom" (formula "1") (term "0") (inst "quotient=quotient_4"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "5"))
                           (rule "times_zero_1" (formula "18") (term "0,0"))
                           (rule "add_zero_left" (formula "18") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                           (rule "concrete_or_2" (formula "18") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0"))
                           (rule "leq_literals" (formula "18") (term "0"))
                           (rule "concrete_or_2" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "18"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (rule "concrete_or_1" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "18"))
                           (rule "times_zero_1" (formula "2") (term "1,1,0"))
                           (rule "greater_literals" (formula "2") (term "0,0"))
                           (rule "concrete_impl_1" (formula "2") (term "0"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (rule "concrete_and_2" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: nbits >= 1 FALSE"
                           (rule "concrete_impl_2" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "25"))
                           (rule "ifthenelse_false" (formula "14") (term "0"))
                           (rule "eqSymm" (formula "14"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "10"))
                           (rule "concrete_impl_1" (formula "17"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "9"))
                           (rule "add_zero_right" (formula "14") (term "0,0"))
                           (rule "div_literals" (formula "14") (term "0"))
                           (rule "eqClose" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "9"))
                           (rule "add_literals" (formula "12") (term "0,0"))
                           (rule "jdiv_axiom_inline" (formula "12") (term "0"))
                           (rule "div_literals" (formula "12") (term "1,0"))
                           (rule "mul_literals" (formula "12") (term "0,0,2,0"))
                           (rule "qeq_literals" (formula "12") (term "0,0"))
                           (rule "ifthenelse_false" (formula "12") (term "0"))
                           (rule "div_literals" (formula "12") (term "0,0"))
                           (rule "times_zero_2" (formula "12") (term "0"))
                           (rule "eqSymm" (formula "12"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "13"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "div_literals" (formula "1") (term "0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                           (rule "leq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
               )
               (branch "if exc_1 instanceof java.lang.Throwable false"
                  (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                  (rule "concrete_or_4" (formula "1") (term "0,1"))
                  (rule "double_not" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "typeEqDerived" (formula "18") (term "0,0") (ifseqformula "1"))
                  (rule "typeEqDerived" (formula "18") (term "0,1") (ifseqformula "1"))
                  (rule "close" (formula "21") (ifseqformula "1"))
               )
            )
         )
         (branch "Pre (NegativeArraySizeException)"
            (rule "expand_inInt" (formula "4"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "expand_inInt" (formula "7"))
            (rule "replace_int_MAX" (formula "4") (term "1,0"))
            (rule "replace_int_MIN" (formula "4") (term "0,1"))
            (rule "replace_int_MAX" (formula "7") (term "1,0"))
            (rule "replace_int_MIN" (formula "7") (term "0,1"))
            (rule "simplifyUpdate2" (formula "14") (term "1"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "8"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "applyOnPV" (formula "16") (term "0"))
            (rule "wellFormedStorePrimitive" (formula "16"))
            (rule "wellFormedStorePrimitive" (formula "16"))
            (rule "inEqSimp_ltRight" (formula "13"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
            (rule "leq_literals" (formula "5") (term "0"))
            (rule "concrete_or_1" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "wellFormedStoreObject" (formula "14"))
            (rule "instanceof_not_compatible" (formula "14") (term "1,1,1"))
            (rule "wellFormedStorePrimitive" (formula "14") (term "0"))
            (rule "wellFormedCreate" (formula "14") (term "0"))
            (rule "eqClose" (formula "14") (term "0,1"))
            (rule "concrete_or_1" (formula "14") (term "1"))
            (rule "concrete_and_3" (formula "14"))
            (rule "close" (formula "14") (ifseqformula "3"))
         )
      )
      (branch "if x_2 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "10"))
         (rule "applyOnPV" (formula "10") (term "0"))
         (rule "simplifyUpdate1" (formula "10") (term "1"))
         (rule "ifthenelse_concrete3" (formula "10"))
         (rule "boolean_not_equal_2" (formula "10") (term "1"))
         (rule "concrete_or_4" (formula "10"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=x_arr_2"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr_2"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "length_1"))
         (rule "assignment" (formula "14") (term "1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "simplifyUpdate3" (formula "14") (term "1,0"))
         (rule "applyOnElementary" (formula "14") (term "1,0"))
         (rule "applyOnPV" (formula "14") (term "0,1,0"))
         (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
         (rule "simplifyUpdate2" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "newObject"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=x_arr_3"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr_3"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "length_2"))
         (rule "assignment" (formula "14") (term "1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "simplifyUpdate3" (formula "14") (term "1,0"))
         (rule "applyOnElementary" (formula "14") (term "1,0"))
         (rule "applyOnPV" (formula "14") (term "0,1,0"))
         (rule "allocateInstanceWithLength" (formula "14"))
         (rule "false_to_not_true" (formula "1") (term "0,1,1,0,1"))
         (rule "simplifyUpdate2" (formula "15"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "sequentialToParallel2" (formula "17"))
         (rule "simplifyUpdate2" (formula "17"))
         (rule "simplifyUpdate3" (formula "17") (term "1,0"))
         (rule "applyOnElementary" (formula "17") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate2" (formula "1") (term "0"))
         (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1") (term "0,1"))
         (rule "simplifyUpdate2" (formula "1") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "1") (term "0"))
         (rule "applyOnPV" (formula "1") (term "0,0"))
         (rule "wellFormedStorePrimitive" (formula "1") (term "0"))
         (rule "wellFormedStorePrimitive" (formula "1") (term "0"))
         (rule "applyOnRigidTerm" (formula "17") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "3,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "2,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
         (rule "simplifyUpdate1" (formula "1") (term "0,1,1"))
         (rule "applyOnPV" (formula "1") (term "1,1,1"))
         (rule "applyOnRigidTerm" (formula "17") (term "0,0,0,1,0"))
         (rule "applyOnPV" (formula "17") (term "0,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "1") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
         (rule "simplifyUpdate1" (formula "1") (term "2,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1"))
         (rule "applyOnPV" (formula "1") (term "0,0,0,0,1"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,1"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,1"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,1"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,1"))
         (rule "blockEmpty" (formula "17") (term "1"))
         (rule "assignment" (formula "17") (term "1"))
         (rule "sequentialToParallel2" (formula "17"))
         (rule "simplifyUpdate3" (formula "17") (term "1,0"))
         (rule "wellFormedStoreObject" (formula "1") (term "0"))
         (rule "instanceof_not_compatible" (formula "1") (term "1,1,1,0"))
         (rule "wellFormedStorePrimitive" (formula "1") (term "0,0"))
         (rule "wellFormedCreate" (formula "1") (term "0,0"))
         (rule "eqClose" (formula "1") (term "0,1,0"))
         (rule "concrete_or_1" (formula "1") (term "1,0"))
         (rule "concrete_and_3" (formula "1") (term "0"))
         (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "4"))
         (rule "concrete_impl_1" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=java_lang_Object_created__0"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "18"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replaceKnownAuxiliaryConstant_taclet101_1" (formula "12") (term "0"))
         (rule "arrayLengthNotNegative" (formula "1") (term "0"))
         (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
         (rule "methodCall" (formula "20"))
         (branch "Normal Execution (newObject != null )"
            (rule "methodBodyExpand" (formula "20") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
            (rule "simplifyUpdate2" (formula "20") (term "1"))
            (rule "assignment_write_attribute_this" (formula "20"))
            (rule "sequentialToParallel2" (formula "20"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "simplifyUpdate3" (formula "20") (term "1,0"))
            (rule "applyOnElementary" (formula "20") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "20") (term "1,0,1,0"))
            (rule "methodCallWithinClass" (formula "20") (term "1"))
            (rule "methodBodyExpand" (formula "20") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
            (rule "simplifyUpdate2" (formula "20") (term "1"))
            (rule "arrayInitialisation" (formula "20") (term "1"))
            (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1"))
            (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1"))
            (rule "sequentialToParallel2" (formula "20"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "simplifyUpdate3" (formula "20") (term "1,0"))
            (rule "applyOnElementary" (formula "20") (term "1,0"))
            (rule "polySimp_addComm0" (formula "20") (term "2,1,1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0"))
            (rule "applyOnPV" (formula "20") (term "0,1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "20") (term "2,1,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "0,2,1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "20") (term "1,2,1,0,1,0"))
            (rule "applyOnPV" (formula "20") (term "0,1,2,1,0,1,0"))
            (rule "methodCallEmpty" (formula "20") (term "1"))
            (rule "blockEmpty" (formula "20") (term "1"))
            (rule "assignment_write_attribute_this" (formula "20"))
            (rule "sequentialToParallel2" (formula "20"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "simplifyUpdate3" (formula "20") (term "1,0"))
            (rule "applyOnElementary" (formula "20") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "20") (term "1,0,1,0"))
            (rule "methodCallReturnIgnoreResult" (formula "20") (term "1"))
            (rule "blockEmpty" (formula "20") (term "1"))
            (rule "methodCallReturn" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
            (rule "sequentialToParallel2" (formula "20"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "simplifyUpdate3" (formula "20") (term "1,0"))
            (rule "applyOnElementary" (formula "20") (term "1,0"))
            (rule "applyOnPV" (formula "20") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "20") (term "1"))
            (rule "blockEmpty" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
            (rule "sequentialToParallel2" (formula "20"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "simplifyUpdate3" (formula "20") (term "1,0"))
            (rule "applyOnElementary" (formula "20") (term "1,0"))
            (rule "applyOnPV" (formula "20") (term "0,1,0"))
            (rule "blockEmpty" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
            (rule "sequentialToParallel2" (formula "20"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "simplifyUpdate3" (formula "20") (term "1,0"))
            (rule "applyOnElementary" (formula "20") (term "1,0"))
            (rule "applyOnPV" (formula "20") (term "0,1,0"))
            (rule "assignment_write_attribute" (formula "20"))
            (branch "Normal Execution (b_2 != null)"
               (rule "sequentialToParallel2" (formula "20"))
               (rule "simplifyUpdate2" (formula "20"))
               (rule "simplifyUpdate3" (formula "20") (term "1,0"))
               (rule "applyOnElementary" (formula "20") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "20") (term "3,0,1,0"))
               (rule "applyOnPV" (formula "20") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
               (rule "methodCallEmpty" (formula "20") (term "1"))
               (rule "blockEmpty" (formula "20") (term "1"))
               (rule "assignment_write_attribute_this" (formula "20"))
               (rule "sequentialToParallel2" (formula "20"))
               (rule "simplifyUpdate2" (formula "20"))
               (rule "simplifyUpdate3" (formula "20") (term "1,0"))
               (rule "applyOnElementary" (formula "20") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "20") (term "1,0,1,0"))
               (rule "methodCallEmpty" (formula "20") (term "1"))
               (rule "blockEmpty" (formula "20") (term "1"))
               (rule "assignment_write_attribute" (formula "20"))
               (branch "Normal Execution (self_1 != null)"
                  (rule "sequentialToParallel2" (formula "20"))
                  (rule "simplifyUpdate2" (formula "20"))
                  (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                  (rule "applyOnElementary" (formula "20") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "20") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "20") (term "1,0,1,0"))
                  (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
                  (rule "tryEmpty" (formula "20") (term "1"))
                  (rule "emptyModality" (formula "20") (term "1"))
                  (rule "andRight" (formula "20"))
                  (branch "Case 1"
                     (rule "andRight" (formula "20"))
                     (branch "Case 1"
                        (rule "andRight" (formula "20"))
                        (branch "Case 1"
                           (rule "simplifyUpdate2" (formula "20") (userinteraction))
                           (rule "applyOnRigidFormula" (formula "20") (userinteraction))
                           (rule "applyOnRigidTerm" (formula "20") (term "0") (userinteraction))
                           (rule "applyOnRigidTerm" (formula "20") (term "0,0") (userinteraction))
                           (rule "simplifyUpdate1" (formula "20") (term "1,0,0") (userinteraction))
                           (rule "applyOnPV" (formula "20") (term "1,0,0") (userinteraction))
                           (rule "simplifyUpdate1" (formula "20") (term "1") (userinteraction))
                           (rule "simplifyUpdate1" (formula "20") (term "0,0,0") (userinteraction))
                           (rule "Definition_axiom_for_wordsToSeq_in_java_util_BitSet" (formula "20") (term "0,0") (inst "i=i") (ifseqformula "5") (userinteraction))
                           (rule "lenOfSeqDef" (formula "20") (term "0") (userinteraction))
                           (rule "ifthenelse_concrete4" (formula "20"))
                           (rule "insert_constant_value" (formula "20") (term "1,0,0,1"))
                           (rule "insert_constant_value" (formula "20") (term "1,1,0,0"))
                           (rule "expand_inInt" (formula "7"))
                           (rule "expand_inInt" (formula "10"))
                           (rule "expand_inInt" (formula "2"))
                           (rule "replace_int_MAX" (formula "7") (term "1,0"))
                           (rule "replace_int_MIN" (formula "7") (term "0,1"))
                           (rule "replace_int_MAX" (formula "10") (term "1,0"))
                           (rule "replace_int_MIN" (formula "10") (term "0,1"))
                           (rule "replace_int_MAX" (formula "2") (term "1,0"))
                           (rule "replace_int_MIN" (formula "2") (term "0,1"))
                           (rule "applyOnPV" (formula "20") (term "0,0,0,0,1"))
                           (rule "applyOnPV" (formula "20") (term "0,0,1,0,0"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "2"))
                           (rule "orRight" (formula "23"))
                           (rule "notRight" (formula "23"))
                           (rule "polySimp_elimSub" (formula "24") (term "0"))
                           (rule "times_zero_2" (formula "24") (term "1,0"))
                           (rule "add_zero_right" (formula "24") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "20"))
                           (rule "times_zero_1" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "21"))
                           (rule "times_zero_1" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "0,1"))
                           (rule "dismissNonSelectedField" (formula "23") (term "0,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "0,1"))
                           (rule "dismissNonSelectedField" (formula "23") (term "0,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "0,1"))
                           (rule "dismissNonSelectedField" (formula "23") (term "0,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "0,1"))
                           (rule "dismissNonSelectedField" (formula "23") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                           (rule "applyEq" (formula "22") (term "1,2,1,0,0,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "2") (term "1,2,1,0,0,1,0") (ifseqformula "5"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (rule "concrete_and_2" (formula "22"))
                           (rule "false_right" (formula "22"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                           (rule "leq_literals" (formula "9") (term "0"))
                           (rule "concrete_or_1" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=int::select(memset(store(store(store(create(store(store(store(store(create(heap,
                                                                           b_1),
                                                                    b_1,
                                                                    java.lang.Object::<initialized>,
                                                                    FALSE),
                                                              b_1,
                                                              java.util.BitSet::$words,
                                                              null),
                                                        b_1,
                                                        java.util.BitSet::$wordsInUse,
                                                        Z(0(#))),
                                                  b_1,
                                                  java.util.BitSet::$sizeIsSticky,
                                                  FALSE),
                                            x_arr_3),
                                     x_arr_3,
                                     java.lang.Object::<transient>,
                                     Z(0(#))),
                               x_arr_3,
                               java.lang.Object::<transactionConditionallyUpdated>,
                               FALSE),
                         x_arr_3,
                         java.lang.Object::<initialized>,
                         FALSE),
                   arrayRange(x_arr_3,
                              Z(0(#)),
                              add(Z(neglit(1(#))),
                                  addJint(result,
                                          Z(1(#))))),
                   Z(0(#))),
            b_1,
            java.util.BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "2") (term "0,0"))
                           (rule "concrete_or_2" (formula "2") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0"))
                           (rule "leq_literals" (formula "2") (term "0"))
                           (rule "concrete_or_2" (formula "2"))
                           (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=java_util_BitSet_wordsInUse_0"))
                           (rule "simplifySelectOfMemset" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "2,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "2,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "2,0"))
                           (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                           (rule "equalUnique" (formula "2") (term "0,0,0,1,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,0,1,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,1,0,0"))
                           (rule "eqSymm" (formula "2") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "20"))
                           (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "simplifySelectOfCreate" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "eqClose" (formula "2") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                           (rule "equalUnique" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "eqClose" (formula "2") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                           (rule "eqClose" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "2") (term "0,0"))
                           (rule "equalUnique" (formula "2") (term "0,0,0"))
                           (rule "concrete_not_2" (formula "2") (term "0,0"))
                           (rule "ifthenelse_true" (formula "2") (term "0"))
                           (rule "castDel" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "Case 2"
                           (rule "simplifyUpdate2" (formula "20") (userinteraction))
                           (rule "applyOnRigidFormula" (formula "20") (userinteraction))
                           (rule "simplifyUpdate1" (formula "20") (term "1") (userinteraction))
                           (rule "applyOnPV" (formula "20") (term "1") (userinteraction))
                           (rule "Class_invariant_axiom_for_java_util_BitSet" (formula "20") (inst "i=i") (inst "i_0=i_0") (ifseqformula "5") (userinteraction))
                           (rule "andRight" (formula "20"))
                           (branch "Case 1"
                              (rule "notRight" (formula "20"))
                              (rule "expand_inInt" (formula "8"))
                              (rule "expand_inInt" (formula "11"))
                              (rule "expand_inInt" (formula "3"))
                              (rule "replace_int_MAX" (formula "8") (term "1,0"))
                              (rule "replace_int_MIN" (formula "8") (term "0,1"))
                              (rule "replace_int_MIN" (formula "11") (term "0,1"))
                              (rule "replace_int_MAX" (formula "11") (term "1,0"))
                              (rule "replace_int_MAX" (formula "3") (term "1,0"))
                              (rule "replace_int_MIN" (formula "3") (term "0,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                              (rule "applyOnPV" (formula "1") (term "0,0"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_ltRight" (formula "20"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "21"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "dismissNonSelectedField" (formula "2") (term "0"))
                              (rule "dismissNonSelectedField" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "11"))
                              (rule "inEqSimp_commuteLeq" (formula "15"))
                              (rule "inEqSimp_commuteLeq" (formula "5"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                              (rule "applyEq" (formula "2") (term "1,2,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (rule "concrete_or_1" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                              (rule "leq_literals" (formula "4") (term "0"))
                              (rule "concrete_or_1" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=java_util_BitSet_words_0"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "eqClose" (formula "2") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                              (rule "eqClose" (formula "2") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0,0"))
                              (rule "equalUnique" (formula "2") (term "0,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "0,0"))
                              (rule "ifthenelse_true" (formula "2") (term "0"))
                              (rule "castDel" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                              (rule "close" (formula "18") (ifseqformula "3"))
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "20"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "20"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "20"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "20"))
                                       (branch "Case 1"
                                          (rule "andRight" (formula "20"))
                                          (branch "Case 1"
                                             (rule "andRight" (formula "20"))
                                             (branch "Case 1"
                                                (rule "andRight" (formula "20"))
                                                (branch "Case 1"
                                                   (rule "notRight" (formula "20"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "expand_inInt" (formula "11"))
                                                   (rule "expand_inInt" (formula "3"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MIN" (formula "11") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "11") (term "1,0"))
                                                   (rule "replace_int_MAX" (formula "3") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "3") (term "0,1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "andLeft" (formula "12"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_ltRight" (formula "20"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_ltRight" (formula "21"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "11"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15"))
                                                   (rule "inEqSimp_commuteLeq" (formula "5"))
                                                   (rule "applyEq" (formula "2") (term "1,2,1,0,0,0,0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                   (rule "concrete_or_1" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "4") (term "0"))
                                                   (rule "concrete_or_1" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=java_util_BitSet_words_0"))
                                                   (rule "simplifySelectOfStore" (formula "2"))
                                                   (rule "eqClose" (formula "2") (term "1,0,0,0"))
                                                   (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                                                   (rule "eqClose" (formula "2") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "2") (term "0,0"))
                                                   (rule "equalUnique" (formula "2") (term "0,0,0"))
                                                   (rule "concrete_not_2" (formula "2") (term "0,0"))
                                                   (rule "ifthenelse_true" (formula "2") (term "0"))
                                                   (rule "castDel" (formula "2") (term "0"))
                                                   (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                                                   (rule "close" (formula "18") (ifseqformula "3"))
                                                )
                                                (branch "Case 2"
                                                   (rule "orRight" (formula "20"))
                                                   (rule "notRight" (formula "21"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "expand_inInt" (formula "11"))
                                                   (rule "expand_inInt" (formula "3"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MIN" (formula "11") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "11") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "3") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "3") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                                                   (rule "simplifyUpdate1" (formula "21") (term "0,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0"))
                                                   (rule "applyOnPV" (formula "21") (term "0,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0,0,0,2,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,0,2,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "andLeft" (formula "12"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "translateJavaSubInt" (formula "1") (term "0,2,0"))
                                                   (rule "inEqSimp_ltRight" (formula "21"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_ltRight" (formula "20"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "1,0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0,0,2,0"))
                                                   (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "1,0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0,0,2,0"))
                                                   (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0,0,2,0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0,0,2,0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "11"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15"))
                                                   (rule "inEqSimp_commuteLeq" (formula "5"))
                                                   (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "2") (term "1,2,1,0,0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "2") (term "1,2,1,0,0,0,1,0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "23") (term "1,2,1,0,0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "2") (term "1,2,1,0,0,0,2,0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                                   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "4") (term "0"))
                                                   (rule "concrete_or_1" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                   (rule "concrete_or_1" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=java_util_BitSet_words_0"))
                                                   (rule "simplifySelectOfStore" (formula "2"))
                                                   (rule "eqClose" (formula "2") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                                                   (rule "eqClose" (formula "2") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "2") (term "0,0"))
                                                   (rule "equalUnique" (formula "2") (term "0,0,0"))
                                                   (rule "concrete_not_2" (formula "2") (term "0,0"))
                                                   (rule "ifthenelse_true" (formula "2") (term "0"))
                                                   (rule "castDel" (formula "2") (term "0"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=java_util_BitSet_wordsInUse_0"))
                                                   (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "1"))
                                                   (rule "simplifySelectOfMemset" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                                                   (rule "equalUnique" (formula "1") (term "0,0,0,1,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,1,0,0"))
                                                   (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "20"))
                                                   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfCreate" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "equalUnique" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "eqClose" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "eqClose" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_true" (formula "1") (term "0"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                   (rule "applyEqReverse" (formula "3") (term "0,0,2,0") (ifseqformula "1"))
                                                   (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "1"))
                                                   (rule "eqClose" (formula "21"))
                                                   (rule "closeTrue" (formula "21"))
                                                )
                                             )
                                             (branch "Case 2"
                                                (rule "andRight" (formula "20"))
                                                (branch "Case 1"
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "expand_inInt" (formula "10"))
                                                   (rule "expand_inInt" (formula "2"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "10") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "10") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "2") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "2") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "20") (term "0,0"))
                                                   (rule "applyOnPV" (formula "20") (term "0,0"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_ltRight" (formula "19"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_ltRight" (formula "20"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "22"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "11"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15"))
                                                   (rule "inEqSimp_commuteLeq" (formula "5"))
                                                   (rule "applyEq" (formula "1") (term "1,2,1,0,1,0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                                   (rule "leq_literals" (formula "4") (term "0"))
                                                   (rule "concrete_or_1" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                   (rule "concrete_or_1" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_util_BitSet_wordsInUse_0"))
                                                   (rule "simplifySelectOfMemset" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                                                   (rule "equalUnique" (formula "1") (term "0,0,0,1,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,1,0,0"))
                                                   (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "20"))
                                                   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfCreate" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "eqClose" (formula "1") (term "1,0,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                                   (rule "eqClose" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "1") (term "0,0"))
                                                   (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_true" (formula "1") (term "0"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                   (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "Case 2"
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "expand_inInt" (formula "10"))
                                                   (rule "expand_inInt" (formula "2"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "10") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "10") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "2") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "2") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "20") (term "0,0"))
                                                   (rule "simplifyUpdate1" (formula "20") (term "0,0,1"))
                                                   (rule "applyOnPV" (formula "20") (term "0,0"))
                                                   (rule "applyOnPV" (formula "20") (term "0,0,1"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "andLeft" (formula "11"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_ltRight" (formula "20"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_ltRight" (formula "19"))
                                                   (rule "times_zero_1" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0,1"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0,1"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "22"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "11"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15"))
                                                   (rule "inEqSimp_commuteLeq" (formula "5"))
                                                   (rule "applyEq" (formula "1") (term "1,2,1,0,0,0,0,0,1,0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                   (rule "applyEq" (formula "1") (term "1,2,1,0,1,0,0") (ifseqformula "5"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                                   (rule "leq_literals" (formula "4") (term "0"))
                                                   (rule "concrete_or_1" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                   (rule "concrete_or_1" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=java_util_BitSet_wordsInUse_0"))
                                                   (rule "simplifySelectOfMemset" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                                   (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                                                   (rule "equalUnique" (formula "1") (term "0,0,0,1,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,1,0,0"))
                                                   (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfCreate" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                                   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "eqClose" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "1") (term "0,0"))
                                                   (rule "eqClose" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_true" (formula "1") (term "0"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                                   (rule "add_literals" (formula "2") (term "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_BitSet_words_0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "eqClose" (formula "1") (term "1,0,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                                   (rule "eqClose" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "1") (term "0,0"))
                                                   (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "0,0"))
                                                   (rule "ifthenelse_true" (formula "1") (term "0"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                   (rule "concrete_and_2" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                          )
                                          (branch "Case 2"
                                             (rule "orRight" (formula "20"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "expand_inInt" (formula "10"))
                                             (rule "expand_inInt" (formula "2"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "10") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "10") (term "1,0"))
                                             (rule "replace_int_MAX" (formula "2") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "2") (term "0,1"))
                                             (rule "simplifyUpdate1" (formula "21") (term "0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "0,1,0"))
                                             (rule "applyOnPV" (formula "21") (term "0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,0,1"))
                                             (rule "applyOnPV" (formula "20") (term "0,0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "0,0,2,0"))
                                             (rule "applyOnPV" (formula "21") (term "0,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,1"))
                                             (rule "applyOnPV" (formula "21") (term "0,0,2,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "andLeft" (formula "11"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "eqSymm" (formula "23"))
                                             (rule "inEqSimp_ltRight" (formula "20"))
                                             (rule "mul_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltRight" (formula "19"))
                                             (rule "times_zero_1" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "1,0"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0,2,0"))
                                             (rule "dismissNonSelectedField" (formula "22") (term "0,0"))
                                             (rule "eqSymm" (formula "22"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "1,0"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0,2,0"))
                                             (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                             (rule "eqSymm" (formula "22"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0,2,0"))
                                             (rule "dismissNonSelectedField" (formula "22") (term "0,0"))
                                             (rule "eqSymm" (formula "22"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0,2,0"))
                                             (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                             (rule "eqSymm" (formula "22"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                             (rule "dismissNonSelectedField" (formula "22") (term "1"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                             (rule "dismissNonSelectedField" (formula "22") (term "1"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                             (rule "dismissNonSelectedField" (formula "23") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "10"))
                                             (rule "inEqSimp_commuteLeq" (formula "14"))
                                             (rule "inEqSimp_commuteLeq" (formula "4"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "23") (term "1,2,1,0,0,2,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "23") (term "1,2,1,0,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "22") (term "1,2,1,0,0,0,0,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "23") (term "1,2,1,0,0,0,1,0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "5"))
                                             (rule "applyEq" (formula "21") (term "1,2,1,0,1") (ifseqformula "4"))
                                             (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                             (rule "leq_literals" (formula "9") (term "0"))
                                             (rule "concrete_or_1" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "3") (term "0"))
                                             (rule "concrete_or_1" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "pullOutSelect" (formula "20") (term "0,2,0") (inst "selectSK=java_util_BitSet_wordsInUse_0"))
                                             (rule "applyEq" (formula "20") (term "1") (ifseqformula "1"))
                                             (rule "simplifySelectOfMemset" (formula "1"))
                                             (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "1") (term "0,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                             (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                                             (rule "equalUnique" (formula "1") (term "0,0,0,1,0,0"))
                                             (rule "concrete_and_2" (formula "1") (term "0,0,1,0,0"))
                                             (rule "concrete_and_2" (formula "1") (term "0,1,0,0"))
                                             (rule "eqSymm" (formula "1") (term "0,0,0"))
                                             (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "17"))
                                             (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "1") (term "0"))
                                             (rule "simplifySelectOfCreate" (formula "1"))
                                             (rule "equalUnique" (formula "1") (term "1,0,0"))
                                             (rule "concrete_and_4" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "1") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "1") (term "0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0"))
                                             (rule "equalUnique" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "1") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0"))
                                             (rule "equalUnique" (formula "1") (term "0,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_true" (formula "1") (term "0"))
                                             (rule "castDel" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "21") (term "0,2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "19") (term "0,0") (inst "selectSK=java_util_BitSet_words_0"))
                                             (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0"))
                                             (rule "equalUnique" (formula "1") (term "0,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_true" (formula "1") (term "0"))
                                             (rule "castDel" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "20") (term "0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "applyEq" (formula "19") (term "0") (ifseqformula "3"))
                                             (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "19"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "1"))
                                             (rule "mul_literals" (formula "19") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0"))
                                             (rule "leq_literals" (formula "19") (term "0"))
                                             (rule "concrete_and_2" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_0"))
                                             (rule "simplifySelectOfMemset" (formula "1"))
                                             (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "1") (term "0,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                             (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                             (rule "leq_literals" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                             (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
                                             (rule "ifthenelse_true" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
                                             (rule "eqClose" (formula "20"))
                                             (rule "closeTrue" (formula "20"))
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "impRight" (formula "20"))
                                          (rule "expand_inInt" (formula "8"))
                                          (rule "expand_inInt" (formula "11"))
                                          (rule "expand_inInt" (formula "3"))
                                          (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "11") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "11") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "3") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "3") (term "1,0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "0,0,1"))
                                          (rule "applyOnPV" (formula "1") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "0,0,1,0"))
                                          (rule "applyOnPV" (formula "1") (term "0,0,1"))
                                          (rule "simplifyUpdate1" (formula "21") (term "0,0,0,0,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "0,1,0,1,0"))
                                          (rule "applyOnPV" (formula "21") (term "0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "0,0,1,1,0,0"))
                                          (rule "applyOnPV" (formula "21") (term "0,0,0,0,0"))
                                          (rule "applyOnPV" (formula "21") (term "0,1,0,1,0"))
                                          (rule "applyOnPV" (formula "21") (term "0,0,1,1,0,0"))
                                          (rule "andLeft" (formula "8"))
                                          (rule "andLeft" (formula "12"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "allRight" (formula "24") (inst "sk=i_0_0"))
                                          (rule "impRight" (formula "24"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_ltRight" (formula "22"))
                                          (rule "times_zero_1" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_ltRight" (formula "23"))
                                          (rule "times_zero_1" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "4") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "4") (term "0,1"))
                                          (rule "dismissNonSelectedField" (formula "25") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "3") (term "0,1"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "4") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "4") (term "0,1"))
                                          (rule "dismissNonSelectedField" (formula "25") (term "1,0"))
                                          (rule "dismissNonSelectedField" (formula "3") (term "0,1"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "4") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "25") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "4") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "25") (term "1,0"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "25") (term "0"))
                                          (rule "dismissNonSelectedField" (formula "25") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "13"))
                                          (rule "inEqSimp_commuteLeq" (formula "17"))
                                          (rule "inEqSimp_commuteLeq" (formula "7"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "4") (term "1,2,1,0,0,0,0,0,1,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "25") (term "1,2,1,0,0,0,1,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "6") (term "0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "3") (term "1,2,1,0,0,0,0,0,1,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "24") (term "1,2,1,0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "2") (term "1,2,1,0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "4") (term "1,2,1,0,1,0,0") (ifseqformula "7"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                          (rule "concrete_or_1" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
                                          (rule "leq_literals" (formula "11") (term "0"))
                                          (rule "concrete_or_1" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=java_util_BitSet_words_0"))
                                          (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "1") (term "0,0"))
                                          (rule "eqClose" (formula "1") (term "0,0,0"))
                                          (rule "concrete_and_1" (formula "1") (term "0,0"))
                                          (rule "eqClose" (formula "1") (term "0,0"))
                                          (rule "ifthenelse_true" (formula "1") (term "0"))
                                          (rule "castDel" (formula "1") (term "0"))
                                          (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "6"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                          (rule "mul_literals" (formula "4") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                          (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=java_util_BitSet_wordsInUse_0"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "2"))
                                          (rule "simplifySelectOfMemset" (formula "2"))
                                          (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "2") (term "0,0"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "2,0"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "2,0"))
                                          (rule "dismissNonSelectedField" (formula "2") (term "2,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "5"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                          (rule "mul_literals" (formula "5") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                          (rule "elementOfArrayRange" (formula "2") (term "0,0") (inst "iv=iv"))
                                          (rule "equalUnique" (formula "2") (term "0,0,0,1,0,0"))
                                          (rule "concrete_and_2" (formula "2") (term "0,0,1,0,0"))
                                          (rule "concrete_and_2" (formula "2") (term "0,1,0,0"))
                                          (rule "eqSymm" (formula "2") (term "0,0,0"))
                                          (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "22"))
                                          (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                                          (rule "concrete_and_2" (formula "2") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "2") (term "0"))
                                          (rule "simplifySelectOfCreate" (formula "2"))
                                          (rule "equalUnique" (formula "2") (term "1,0,0"))
                                          (rule "concrete_and_4" (formula "2") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "2") (term "0"))
                                          (rule "simplifySelectOfStore" (formula "2"))
                                          (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "2") (term "0,0"))
                                          (rule "equalUnique" (formula "2") (term "1,0,0"))
                                          (rule "concrete_and_4" (formula "2") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "2") (term "0"))
                                          (rule "simplifySelectOfStore" (formula "2"))
                                          (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "2") (term "0,0"))
                                          (rule "eqClose" (formula "2") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "2") (term "0,0"))
                                          (rule "eqClose" (formula "2") (term "0,0"))
                                          (rule "ifthenelse_true" (formula "2") (term "0"))
                                          (rule "castDel" (formula "2") (term "0"))
                                          (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                                          (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "2"))
                                          (rule "add_zero_right" (formula "5") (term "1"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                          (rule "concrete_or_1" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=arr_0"))
                                          (rule "simplifySelectOfMemset" (formula "1"))
                                          (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "1") (term "0,0"))
                                          (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                          (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                          (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                          (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                          (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                          (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                          (rule "concrete_and_1" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                                          (rule "ifthenelse_true" (formula "1") (term "0"))
                                          (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
                                          (rule "eqClose" (formula "22"))
                                          (rule "closeTrue" (formula "22"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "insert_constant_value" (formula "20") (term "0,0,1"))
                                       (rule "insert_constant_value" (formula "20") (term "1,0,1"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "expand_inInt" (formula "10"))
                                       (rule "expand_inInt" (formula "2"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "10") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "10") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "2") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "2") (term "1,0"))
                                       (rule "simplifyUpdate1" (formula "20") (term "0,0"))
                                       (rule "applyOnPV" (formula "20") (term "0,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "translateJavaAddInt" (formula "23") (term "1"))
                                       (rule "translateJavaDivInt" (formula "23") (term "0,1"))
                                       (rule "inEqSimp_ltRight" (formula "19"))
                                       (rule "times_zero_1" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_ltRight" (formula "20"))
                                       (rule "times_zero_1" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                       (rule "dismissNonSelectedField" (formula "22") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "22"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "inEqSimp_commuteLeq" (formula "15"))
                                       (rule "inEqSimp_commuteLeq" (formula "5"))
                                       (rule "applyEq" (formula "1") (term "1,2,1,0,1,0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "10") (term "0"))
                                       (rule "concrete_or_1" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                       (rule "concrete_or_1" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_util_BitSet_wordsInUse_0"))
                                       (rule "simplifySelectOfMemset" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                       (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "elementOfArrayRange" (formula "1") (term "0,0") (inst "iv=iv"))
                                       (rule "equalUnique" (formula "1") (term "0,0,0,1,0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0,0,1,0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0,1,0,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "20"))
                                       (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "simplifySelectOfCreate" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                       (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                       (rule "equalUnique" (formula "1") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "eqClose" (formula "1") (term "1,0,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                       (rule "eqClose" (formula "1") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "1") (term "0,0"))
                                       (rule "equalUnique" (formula "1") (term "0,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_true" (formula "1") (term "0"))
                                       (rule "castDel" (formula "1") (term "0"))
                                       (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                       (rule "add_zero_right" (formula "2") (term "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "expand_subJint" (formula "14") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "14") (term "0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                       (rule "polySimp_addComm0" (formula "14") (term "0,0,0"))
                                       (rule "expand_subJint" (formula "13") (term "0,0,1"))
                                       (rule "polySimp_elimSub" (formula "13") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,1"))
                                       (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1"))
                                       (rule "expand_addJint" (formula "4") (term "1"))
                                       (rule "polySimp_addComm0" (formula "4") (term "0,1"))
                                       (rule "expand_subJint" (formula "13") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                                       (rule "expand_addJint" (formula "2") (term "0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                       (rule "expand_addJint" (formula "3") (term "0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                       (rule "expand_divJint" (formula "1") (term "0,0"))
                                       (rule "jdiv_axiom_inline" (formula "1") (term "0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,2,0,0,0"))
                                       (rule "div_literals" (formula "1") (term "1,0,0,0"))
                                       (rule "qeq_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "ifthenelse_true" (formula "1") (term "0,0,0"))
                                       (rule "expand_moduloInteger" (formula "14") (term "0,0"))
                                       (rule "replace_int_RANGE" (formula "14") (term "1,1,0,0"))
                                       (rule "replace_int_HALFRANGE" (formula "14") (term "0,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_homoEq" (formula "14") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0"))
                                       (rule "mod_axiom" (formula "14") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "14") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                                       (rule "expand_moduloInteger" (formula "13") (term "0,0,1"))
                                       (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,0,1"))
                                       (rule "replace_int_MIN" (formula "13") (term "0,0,0,1"))
                                       (rule "replace_int_RANGE" (formula "13") (term "1,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1"))
                                       (rule "add_literals" (formula "13") (term "0,0,1,0,0,1"))
                                       (rule "mod_axiom" (formula "13") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,1"))
                                       (rule "expand_moduloInteger" (formula "4") (term "1"))
                                       (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,1"))
                                       (rule "replace_int_RANGE" (formula "4") (term "1,1,1"))
                                       (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,1,1"))
                                       (rule "add_literals" (formula "4") (term "0,0,1,1"))
                                       (rule "mod_axiom" (formula "4") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                                       (rule "add_literals" (formula "4") (term "0,0,1"))
                                       (rule "polyDiv_pullOut" (formula "4") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0,0,2,0,1,1"))
                                       (rule "equal_literals" (formula "4") (term "0,0,1,1"))
                                       (rule "ifthenelse_false" (formula "4") (term "0,1,1"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,0,1,1,1"))
                                       (rule "add_literals" (formula "4") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "4") (term "1,1,1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,1"))
                                       (rule "mul_literals" (formula "4") (term "0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                                       (rule "add_literals" (formula "4") (term "0,0,1"))
                                       (rule "expand_moduloInteger" (formula "13") (term "0,0"))
                                       (rule "replace_int_MIN" (formula "13") (term "0,0,0"))
                                       (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,0"))
                                       (rule "replace_int_RANGE" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                       (rule "mod_axiom" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                                       (rule "expand_moduloInteger" (formula "2") (term "0"))
                                       (rule "replace_int_RANGE" (formula "2") (term "1,1,0"))
                                       (rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "2") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,1,0"))
                                       (rule "mod_axiom" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polyDiv_pullOut" (formula "2") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,0"))
                                       (rule "equal_literals" (formula "2") (term "0,0,0"))
                                       (rule "ifthenelse_false" (formula "2") (term "0,0"))
                                       (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,1,1,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0"))
                                       (rule "mul_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "expand_moduloInteger" (formula "3") (term "0"))
                                       (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
                                       (rule "replace_int_MIN" (formula "3") (term "0,0"))
                                       (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "0,0"))
                                       (rule "mod_axiom" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                       (rule "polyDiv_pullOut" (formula "3") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,2,0,0"))
                                       (rule "equal_literals" (formula "3") (term "0,0,0"))
                                       (rule "ifthenelse_false" (formula "3") (term "0,0"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0"))
                                       (rule "mul_literals" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "expand_addJint" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                       (rule "expand_divJint" (formula "13") (term "0,1"))
                                       (rule "expand_moduloInteger" (formula "1") (term "1,0,0"))
                                       (rule "replace_int_RANGE" (formula "1") (term "1,1,1,0,0"))
                                       (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,1,0,0"))
                                       (rule "replace_int_MIN" (formula "1") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "mod_axiom" (formula "1") (term "1,0,0"))
                                       (rule "div_literals" (formula "1") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                       (rule "times_zero_2" (formula "1") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "expand_moduloInteger" (formula "13") (term "0,1"))
                                       (rule "replace_int_RANGE" (formula "13") (term "1,1,0,1"))
                                       (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,1"))
                                       (rule "replace_int_MIN" (formula "13") (term "0,0,1"))
                                       (rule "polySimp_homoEq" (formula "13") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,1"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
                                       (rule "polySimp_addComm0" (formula "13") (term "0,0,1"))
                                       (rule "polySimp_sepNegMonomial" (formula "13") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0,1"))
                                       (rule "expand_moduloInteger" (formula "1") (term "0"))
                                       (rule "replace_int_RANGE" (formula "1") (term "1,1,0"))
                                       (rule "replace_int_MIN" (formula "1") (term "0,0"))
                                       (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "1") (term "0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "mod_axiom" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                       (rule "div_literals" (formula "1") (term "0,1,0,1,0"))
                                       (rule "times_zero_2" (formula "1") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,1,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0"))
                                       (rule "add_literals" (formula "1") (term "0"))
                                       (rule "qeq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "insert_constant_value" (formula "20") (term "0,0,1,1"))
                                    (rule "insert_constant_value" (formula "20") (term "1,0,1,1"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "expand_inInt" (formula "10"))
                                    (rule "expand_inInt" (formula "2"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "replace_int_MIN" (formula "10") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "10") (term "1,0"))
                                    (rule "replace_int_MIN" (formula "2") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "2") (term "1,0"))
                                    (rule "simplifyUpdate1" (formula "20") (term "0,0,0"))
                                    (rule "applyOnPV" (formula "20") (term "0,0,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "translateJavaMulInt" (formula "23") (term "1"))
                                    (rule "translateJavaDivInt" (formula "23") (term "0,1,1"))
                                    (rule "translateJavaAddInt" (formula "23") (term "1,1"))
                                    (rule "inEqSimp_ltRight" (formula "19"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltRight" (formula "20"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "dismissNonSelectedField" (formula "22") (term "0,0"))
                                    (rule "dismissNonSelectedField" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "11"))
                                    (rule "inEqSimp_commuteLeq" (formula "15"))
                                    (rule "inEqSimp_commuteLeq" (formula "5"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "1") (term "1,2,1,0,0,0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                                    (rule "leq_literals" (formula "10") (term "0"))
                                    (rule "concrete_or_1" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                    (rule "concrete_or_1" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_BitSet_words_0"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "eqClose" (formula "1") (term "1,0,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                    (rule "eqClose" (formula "1") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "1") (term "0,0"))
                                    (rule "equalUnique" (formula "1") (term "0,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_true" (formula "1") (term "0"))
                                    (rule "castDel" (formula "1") (term "0"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "expand_subJint" (formula "13") (term "0,0,1"))
                                    (rule "polySimp_elimSub" (formula "13") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1"))
                                    (rule "expand_subJint" (formula "13") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "13") (term "0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                                    (rule "expand_subJint" (formula "14") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "14") (term "0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,0"))
                                    (rule "expand_addJint" (formula "4") (term "1"))
                                    (rule "polySimp_addComm0" (formula "4") (term "0,1"))
                                    (rule "expand_addJint" (formula "2") (term "0"))
                                    (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                    (rule "expand_addJint" (formula "3") (term "0"))
                                    (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                    (rule "expand_addJint" (formula "1") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0,1,0"))
                                    (rule "expand_addJint" (formula "1") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0,1,1"))
                                    (rule "expand_moduloInteger" (formula "13") (term "0,0,1"))
                                    (rule "replace_int_MIN" (formula "13") (term "0,0,0,1"))
                                    (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,0,1"))
                                    (rule "replace_int_RANGE" (formula "13") (term "1,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0,1"))
                                    (rule "mod_axiom" (formula "13") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,1"))
                                    (rule "expand_moduloInteger" (formula "13") (term "0,0"))
                                    (rule "replace_int_MIN" (formula "13") (term "0,0,0"))
                                    (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,0"))
                                    (rule "replace_int_RANGE" (formula "13") (term "1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                    (rule "mod_axiom" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                                    (rule "expand_moduloInteger" (formula "14") (term "0,0"))
                                    (rule "replace_int_MIN" (formula "14") (term "0,0,0"))
                                    (rule "replace_int_HALFRANGE" (formula "14") (term "0,0,1,0,0"))
                                    (rule "replace_int_RANGE" (formula "14") (term "1,1,0,0"))
                                    (rule "polySimp_homoEq" (formula "14") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0"))
                                    (rule "mod_axiom" (formula "14") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "14") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                                    (rule "expand_moduloInteger" (formula "4") (term "1"))
                                    (rule "replace_int_RANGE" (formula "4") (term "1,1,1"))
                                    (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,1"))
                                    (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,1,1"))
                                    (rule "add_literals" (formula "4") (term "0,0,1,1"))
                                    (rule "mod_axiom" (formula "4") (term "1,1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                                    (rule "add_literals" (formula "4") (term "0,0,1"))
                                    (rule "polyDiv_pullOut" (formula "4") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,0,1,1"))
                                    (rule "equal_literals" (formula "4") (term "0,0,1,1"))
                                    (rule "ifthenelse_false" (formula "4") (term "0,1,1"))
                                    (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0,0,1,1,1"))
                                    (rule "add_literals" (formula "4") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "4") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,1"))
                                    (rule "mul_literals" (formula "4") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                                    (rule "add_literals" (formula "4") (term "0,0,1"))
                                    (rule "expand_moduloInteger" (formula "2") (term "0"))
                                    (rule "replace_int_RANGE" (formula "2") (term "1,1,0"))
                                    (rule "replace_int_MIN" (formula "2") (term "0,0"))
                                    (rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,1,0"))
                                    (rule "mod_axiom" (formula "2") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polyDiv_pullOut" (formula "2") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                                    (rule "equal_literals" (formula "2") (term "0,0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0"))
                                    (rule "mul_literals" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "expand_moduloInteger" (formula "3") (term "0"))
                                    (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "3") (term "0,0"))
                                    (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                    (rule "add_literals" (formula "3") (term "0,0"))
                                    (rule "mod_axiom" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "polyDiv_pullOut" (formula "3") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                                    (rule "equal_literals" (formula "3") (term "0,0,0"))
                                    (rule "ifthenelse_false" (formula "3") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "0"))
                                    (rule "mul_literals" (formula "3") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "expand_divJint" (formula "1") (term "1,0,1,0"))
                                    (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0,1,0"))
                                    (rule "qeq_literals" (formula "1") (term "0,0,1,0,1,0"))
                                    (rule "ifthenelse_true" (formula "1") (term "0,1,0,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,1,0,1,0"))
                                    (rule "expand_moduloInteger" (formula "1") (term "1,1"))
                                    (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,1,1"))
                                    (rule "replace_int_MIN" (formula "1") (term "0,1,1"))
                                    (rule "replace_int_RANGE" (formula "1") (term "1,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,1"))
                                    (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1"))
                                    (rule "add_literals" (formula "1") (term "0,1"))
                                    (rule "mod_axiom" (formula "1") (term "1,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                    (rule "add_literals" (formula "1") (term "0,0,1"))
                                    (rule "add_zero_left" (formula "1") (term "0,1"))
                                    (rule "polyDiv_pullOut" (formula "1") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                                    (rule "equal_literals" (formula "1") (term "0,0,1,1"))
                                    (rule "ifthenelse_false" (formula "1") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,1,1"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,1,1,1"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                                    (rule "expand_divJint" (formula "13") (term "0,1"))
                                    (rule "expand_moduloInteger" (formula "1") (term "1,0"))
                                    (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,1,0"))
                                    (rule "replace_int_RANGE" (formula "1") (term "1,1,1,0"))
                                    (rule "replace_int_MIN" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,1,1,0"))
                                    (rule "mod_axiom" (formula "1") (term "1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                    (rule "polyDiv_pullOut" (formula "1") (term "0,1,1,0") (inst "polyDivCoeff=Z(1(#))"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,1,1,0"))
                                    (rule "equal_literals" (formula "1") (term "0,0,1,1,0"))
                                    (rule "ifthenelse_false" (formula "1") (term "0,1,1,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,1,1,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                    (rule "expand_moduloInteger" (formula "13") (term "0,1"))
                                    (rule "replace_int_RANGE" (formula "13") (term "1,1,0,1"))
                                    (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,1"))
                                    (rule "replace_int_MIN" (formula "13") (term "0,0,1"))
                                    (rule "polySimp_homoEq" (formula "13") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0,1"))
                                    (rule "polySimp_sepNegMonomial" (formula "13") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,1"))
                                    (rule "expand_moduloInteger" (formula "1") (term "1,0,0,1,1,0"))
                                    (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,1,0,0,1,1,0"))
                                    (rule "replace_int_RANGE" (formula "1") (term "1,1,1,0,0,1,1,0"))
                                    (rule "replace_int_MIN" (formula "1") (term "0,1,0,0,1,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,1,1,0,0,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,1,0"))
                                    (rule "mod_axiom" (formula "1") (term "1,0,0,1,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,0,1,1,0,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,1,0"))
                                    (rule "times_zero_2" (formula "1") (term "1,1,0,0,1,1,0"))
                                    (rule "add_zero_right" (formula "1") (term "1,0,0,1,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,1,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,1,1,0"))
                                    (rule "mul_literals" (formula "1") (term "1,1,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0,1,0"))
                                    (rule "expand_moduloInteger" (formula "1") (term "1,1,0"))
                                    (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,1,1,0"))
                                    (rule "replace_int_RANGE" (formula "1") (term "1,1,1,1,0"))
                                    (rule "replace_int_MIN" (formula "1") (term "0,1,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,1,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0,1,0"))
                                    (rule "mod_axiom" (formula "1") (term "1,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,0,1,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                    (rule "times_zero_2" (formula "1") (term "1,1,1,0"))
                                    (rule "add_zero_right" (formula "1") (term "1,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "expand_mulJint" (formula "1") (term "0"))
                                    (rule "mul_literals" (formula "1") (term "0,0"))
                                    (rule "expand_moduloInteger" (formula "1") (term "0"))
                                    (rule "replace_int_RANGE" (formula "1") (term "1,1,0"))
                                    (rule "replace_int_MIN" (formula "1") (term "0,0"))
                                    (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (rule "mod_axiom" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,1,0,1,0"))
                                    (rule "times_zero_2" (formula "1") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,1,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "cut_direct" (formula "13") (term "1"))
                                    (branch "CUT: result = -1 TRUE"
                                       (rule "concrete_impl_4" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "applyEq" (formula "2") (term "1,0,0,0") (ifseqformula "12"))
                                       (rule "add_literals" (formula "2") (term "0,0,0"))
                                       (rule "div_literals" (formula "2") (term "0,0"))
                                       (rule "mul_literals" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "12"))
                                       (rule "add_literals" (formula "1") (term "1"))
                                       (rule "applyEq" (formula "1") (term "1,0,0,0") (ifseqformula "12"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "div_literals" (formula "1") (term "0,0"))
                                       (rule "mul_literals" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "CUT: result = -1 FALSE"
                                       (rule "concrete_impl_3" (formula "13"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "div_axiom" (formula "12") (term "0,0,0") (inst "quotient=quotient_0"))
                                       (rule "equal_literals" (formula "12") (term "0"))
                                       (rule "concrete_or_2" (formula "12"))
                                       (rule "qeq_literals" (formula "12") (term "0,1"))
                                       (rule "ifthenelse_true_for" (formula "12") (term "1"))
                                       (rule "mul_literals" (formula "12") (term "1,1,1"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "14") (term "1"))
                                       (rule "add_literals" (formula "14") (term "0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "13"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "14"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0"))
                                       (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "12"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "12"))
                                       (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                                       (rule "applyEq" (formula "15") (term "0,1,0,1,0,0,1") (ifseqformula "12"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                                       (rule "mul_literals" (formula "13") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1"))
                                       (rule "mul_literals" (formula "14") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "9") (term "0,0"))
                                       (rule "add_zero_left" (formula "9") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                       (rule "mul_literals" (formula "9") (term "1"))
                                       (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                       (rule "leq_literals" (formula "9") (term "0,0"))
                                       (rule "concrete_or_2" (formula "9") (term "0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "9") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "9") (term "0,0"))
                                       (rule "leq_literals" (formula "9") (term "0"))
                                       (rule "concrete_or_2" (formula "9"))
                                       (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0"))
                                       (rule "add_literals" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                       (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                       (rule "leq_literals" (formula "14") (term "0,0"))
                                       (rule "concrete_or_2" (formula "14") (term "0"))
                                       (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0"))
                                       (rule "qeq_literals" (formula "14") (term "0"))
                                       (rule "concrete_or_2" (formula "14"))
                                       (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "14"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "applyEqRigid" (formula "16") (term "0,1,1") (ifseqformula "9"))
                                       (rule "times_zero_2" (formula "16") (term "1,1"))
                                       (rule "add_zero_right" (formula "16") (term "1"))
                                       (rule "applyEqRigid" (formula "17") (term "0,1,1,0") (ifseqformula "9"))
                                       (rule "times_zero_2" (formula "17") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "17") (term "1,0"))
                                       (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "applyEqRigid" (formula "14") (term "0,1,1") (ifseqformula "9"))
                                       (rule "times_zero_2" (formula "14") (term "1,1"))
                                       (rule "add_zero_right" (formula "14") (term "1"))
                                       (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0,1") (ifseqformula "9"))
                                       (rule "times_zero_2" (formula "16") (term "1,0,0,1,0,0,1"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,1"))
                                       (rule "applyEqRigid" (formula "18") (term "0,1") (ifseqformula "9"))
                                       (rule "mul_literals" (formula "18") (term "1"))
                                       (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "18"))
                                       (rule "add_zero_right" (formula "10") (term "1"))
                                       (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "10"))
                                       (rule "concrete_impl_1" (formula "16"))
                                       (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "10"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0"))
                                       (rule "leq_literals" (formula "18") (term "0"))
                                       (rule "concrete_and_2" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "15") (term "0"))
                                       (rule "concrete_or_1" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                       (rule "concrete_or_1" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "div_axiom" (formula "3") (term "0,1,1") (inst "quotient=quotient_1"))
                                       (rule "mul_literals" (formula "3") (term "1,1,1,1,1"))
                                       (rule "equal_literals" (formula "3") (term "0"))
                                       (rule "concrete_or_2" (formula "3"))
                                       (rule "qeq_literals" (formula "3") (term "0,1"))
                                       (rule "ifthenelse_true_for" (formula "3") (term "1"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,1"))
                                       (rule "add_literals" (formula "5") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "5") (term "1"))
                                       (rule "add_literals" (formula "5") (term "0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "2"))
                                       (rule "polySimp_addComm1" (formula "5") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                       (rule "mul_literals" (formula "4") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                       (rule "concrete_or_1" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "13") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                       (rule "add_literals" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                       (rule "mul_literals" (formula "13") (term "1"))
                                       (rule "elimGcdGeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                       (rule "leq_literals" (formula "13") (term "0,0"))
                                       (rule "concrete_or_2" (formula "13") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0"))
                                       (rule "leq_literals" (formula "13") (term "0"))
                                       (rule "concrete_or_2" (formula "13"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "12"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "elimGcdLeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1,0"))
                                       (rule "neg_literal" (formula "1") (term "0,0,0,0,0,1,0"))
                                       (rule "leq_literals" (formula "1") (term "0,0"))
                                       (rule "concrete_or_2" (formula "1") (term "0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_or_2" (formula "1"))
                                       (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                                       (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "14"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEqRigid" (formula "1") (term "0,1,1") (ifseqformula "13"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "add_literals" (formula "1") (term "1"))
                                       (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "13"))
                                       (rule "mul_literals" (formula "3") (term "1,1"))
                                       (rule "add_literals" (formula "3") (term "1"))
                                       (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "13"))
                                       (rule "applyEq" (formula "4") (term "0,1,0,1") (ifseqformula "13"))
                                       (rule "mul_literals" (formula "4") (term "1,0,1"))
                                       (rule "add_literals" (formula "4") (term "0,1"))
                                       (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "1"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0"))
                                       (rule "leq_literals" (formula "18") (term "0"))
                                       (rule "concrete_and_2" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "12") (term "0"))
                                       (rule "concrete_or_1" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "13") (term "0"))
                                       (rule "concrete_or_1" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "jdiv_axiom" (formula "14") (term "1,0,0"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "0,0,2,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "0,0,2,0"))
                                       (rule "mul_literals" (formula "14") (term "0,0,0,2,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0"))
                                       (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "11"))
                                       (rule "ifthenelse_true" (formula "14") (term "0"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "14"))
                                       (rule "div_axiom" (formula "14") (term "1") (inst "quotient=quotient_2"))
                                       (rule "mul_literals" (formula "14") (term "1,1,1,1,1"))
                                       (rule "qeq_literals" (formula "14") (term "0,1,1"))
                                       (rule "ifthenelse_true_for" (formula "14") (term "1,1"))
                                       (rule "equal_literals" (formula "14") (term "0"))
                                       (rule "concrete_or_2" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                                       (rule "add_literals" (formula "16") (term "0,0,1"))
                                       (rule "add_zero_left" (formula "16") (term "0,1"))
                                       (rule "polySimp_addComm0" (formula "16") (term "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0"))
                                       (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "14"))
                                       (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
                                       (rule "mod_axiom" (formula "18") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "18"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "0,1,0"))
                                       (rule "mul_literals" (formula "18") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "18") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "18"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                       (rule "polySimp_mulAssoc" (formula "18") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "18") (term "0,1"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "18"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "18"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                       (rule "mul_literals" (formula "15") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1"))
                                       (rule "mul_literals" (formula "16") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "polyDiv_pullOut" (formula "2") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_2),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                                       (rule "equal_literals" (formula "2") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "2") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_homoEq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                       (rule "polySimp_sepNegMonomial" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "11") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                       (rule "mul_literals" (formula "11") (term "1"))
                                       (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_or_2" (formula "11") (term "0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "leq_literals" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "8"))
                                       (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0"))
                                       (rule "add_literals" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                       (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                                       (rule "neg_literal" (formula "16") (term "0,0,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0"))
                                       (rule "leq_literals" (formula "16") (term "0,0"))
                                       (rule "concrete_or_2" (formula "16") (term "0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0"))
                                       (rule "qeq_literals" (formula "16") (term "0"))
                                       (rule "concrete_or_2" (formula "16"))
                                       (rule "div_axiom" (formula "20") (term "0,1,1") (inst "quotient=quotient_3"))
                                       (rule "mul_literals" (formula "20") (term "1,1,1,1,1"))
                                       (rule "qeq_literals" (formula "20") (term "0,1,1"))
                                       (rule "ifthenelse_true_for" (formula "20") (term "1,1"))
                                       (rule "equal_literals" (formula "20") (term "0"))
                                       (rule "concrete_or_2" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                                       (rule "add_literals" (formula "22") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "22") (term "1"))
                                       (rule "add_literals" (formula "22") (term "0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "21"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "21") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "22"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "22") (term "0"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "20"))
                                       (rule "inEqSimp_homoInEq0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "20"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "applyEqRigid" (formula "23") (term "0,1,1") (ifseqformula "20"))
                                       (rule "polySimp_addComm0" (formula "23") (term "1"))
                                       (rule "applyEqRigid" (formula "2") (term "1,1") (ifseqformula "20"))
                                       (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "20"))
                                       (rule "polySimp_addComm1" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                       (rule "mul_literals" (formula "21") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                       (rule "mul_literals" (formula "22") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0"))
                                       (rule "qeq_literals" (formula "21") (term "0"))
                                       (rule "concrete_or_1" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0"))
                                       (rule "qeq_literals" (formula "21") (term "0"))
                                       (rule "concrete_or_1" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                                       (rule "times_zero_1" (formula "11") (term "0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                       (rule "mul_literals" (formula "11") (term "1"))
                                       (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_or_2" (formula "11") (term "0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "leq_literals" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "17"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "12"))
                                       (rule "times_zero_1" (formula "1") (term "1,1,0"))
                                       (rule "greater_literals" (formula "1") (term "0,0"))
                                       (rule "concrete_impl_1" (formula "1") (term "0"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (rule "concrete_and_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "expand_inLong" (formula "20") (term "1,0"))
                                 (rule "expand_inInt" (formula "7"))
                                 (rule "expand_inInt" (formula "10"))
                                 (rule "expand_inInt" (formula "2"))
                                 (rule "replace_long_MIN" (formula "20") (term "0,1,1,0"))
                                 (rule "replace_long_MAX" (formula "20") (term "1,0,1,0"))
                                 (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                 (rule "replace_int_MIN" (formula "10") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "10") (term "1,0"))
                                 (rule "replace_int_MAX" (formula "2") (term "1,0"))
                                 (rule "replace_int_MIN" (formula "2") (term "0,1"))
                                 (rule "simplifyUpdate1" (formula "20") (term "0,0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "20") (term "0,1,1,1,0"))
                                 (rule "simplifyUpdate1" (formula "20") (term "0,0,1,1,0,0"))
                                 (rule "simplifyUpdate1" (formula "20") (term "0,1,1,1,1,0"))
                                 (rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,1,0"))
                                 (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
                                 (rule "applyOnPV" (formula "20") (term "0,1,1,1,0"))
                                 (rule "applyOnPV" (formula "20") (term "0,0,1,1,0,0"))
                                 (rule "applyOnPV" (formula "20") (term "0,1,1,1,1,0"))
                                 (rule "applyOnPV" (formula "20") (term "0,1,0,0,1,0"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "allRight" (formula "23") (inst "sk=i_0"))
                                 (rule "impRight" (formula "23"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_ltRight" (formula "21"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltRight" (formula "22"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,0,0"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,1,1"))
                                 (rule "dismissNonSelectedField" (formula "3") (term "0,1"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "0,0"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,1"))
                                 (rule "dismissNonSelectedField" (formula "3") (term "0,1"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "0,0"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,1"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "0,0"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,1"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,0,0"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,1,1"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "0,0"))
                                 (rule "dismissNonSelectedField" (formula "24") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12"))
                                 (rule "inEqSimp_commuteLeq" (formula "16"))
                                 (rule "inEqSimp_commuteLeq" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "2"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "24") (term "1,2,1,0,0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "3") (term "1,2,1,0,0,0,0,0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "24") (term "1,2,1,0,0,0,1,0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "23") (term "1,2,1,0,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "23") (term "1,2,1,0,0,0,1,0,1") (ifseqformula "6"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "11") (term "0"))
                                 (rule "concrete_or_1" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                 (rule "concrete_or_1" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "pullOutSelect" (formula "21") (term "1,0,0") (inst "selectSK=java_util_BitSet_words_0"))
                                 (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "22") (term "1,0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqClose" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "1") (term "0"))
                                 (rule "castDel" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "22") (term "1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "22") (term "1,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
                                 (rule "pullOutSelect" (formula "21") (term "0,0") (inst "selectSK=arr_0"))
                                 (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfMemset" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0"))
                                 (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                 (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                 (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                 (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                 (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "4"))
                                 (rule "ifthenelse_true" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "22") (term "0,0") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "22") (term "0"))
                                 (rule "concrete_and_1" (formula "22"))
                                 (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "22"))
                                 (rule "closeTrue" (formula "22"))
                              )
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "expand_inInt" (formula "7"))
                        (rule "expand_inInt" (formula "10"))
                        (rule "simplifyUpdate2" (formula "20"))
                        (rule "expand_inInt" (formula "2"))
                        (rule "replace_int_MAX" (formula "7") (term "1,0"))
                        (rule "replace_int_MIN" (formula "7") (term "0,1"))
                        (rule "replace_int_MIN" (formula "10") (term "0,1"))
                        (rule "replace_int_MAX" (formula "10") (term "1,0"))
                        (rule "replace_int_MIN" (formula "2") (term "0,1"))
                        (rule "replace_int_MAX" (formula "2") (term "1,0"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "23"))
                        (rule "simplifyUpdate1" (formula "23") (term "1"))
                        (rule "applyOnPV" (formula "23") (term "0"))
                        (rule "eqClose" (formula "23"))
                        (rule "closeTrue" (formula "23"))
                     )
                  )
                  (branch "Case 2"
                     (rule "expand_inInt" (formula "7"))
                     (rule "expand_inInt" (formula "10"))
                     (rule "expand_inInt" (formula "2"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "replace_int_MIN" (formula "7") (term "0,1"))
                     (rule "replace_int_MAX" (formula "7") (term "1,0"))
                     (rule "replace_int_MIN" (formula "10") (term "0,1"))
                     (rule "replace_int_MAX" (formula "10") (term "1,0"))
                     (rule "replace_int_MAX" (formula "2") (term "1,0"))
                     (rule "replace_int_MIN" (formula "2") (term "0,1"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "2"))
                     (rule "allRight" (formula "23") (inst "sk=f_0"))
                     (rule "allRight" (formula "23") (inst "sk=o_0"))
                     (rule "orRight" (formula "23"))
                     (rule "simplifyUpdate2" (formula "23"))
                     (rule "inEqSimp_ltRight" (formula "19"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_ltRight" (formula "20"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "applyOnRigidFormula" (formula "23"))
                     (rule "simplifyUpdate1" (formula "23") (term "0"))
                     (rule "simplifyUpdate1" (formula "23") (term "1"))
                     (rule "applyOnRigidFormula" (formula "22"))
                     (rule "simplifyUpdate2" (formula "22") (term "0"))
                     (rule "applyOnRigidTerm" (formula "23") (term "0"))
                     (rule "simplifyUpdate1" (formula "23") (term "2,0"))
                     (rule "applyOnPV" (formula "23") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "23") (term "1,0"))
                     (rule "eqSymm" (formula "23"))
                     (rule "applyOnRigidFormula" (formula "22") (term "1"))
                     (rule "applyOnRigidTerm" (formula "23") (term "0"))
                     (rule "simplifyUpdate1" (formula "23") (term "1,0"))
                     (rule "simplifyUpdate1" (formula "23") (term "2,0"))
                     (rule "applyOnPV" (formula "23") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "22") (term "0,1"))
                     (rule "simplifyUpdate1" (formula "22") (term "1,0,1"))
                     (rule "applyOnRigidTerm" (formula "22") (term "0,0,1"))
                     (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1"))
                     (rule "simplifyUpdate1" (formula "22") (term "2,0,0,1"))
                     (rule "applyOnPV" (formula "22") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "inEqSimp_commuteLeq" (formula "4"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "5"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                     (rule "applyEq" (formula "22") (term "1,2,1,0,0,0,0,0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                     (rule "leq_literals" (formula "3") (term "0"))
                     (rule "concrete_or_1" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (rule "concrete_or_1" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "21"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                     (rule "simplifySelectOfMemset" (formula "1"))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_7"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_8"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "25"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_9"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_10"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_11"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_12"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_13"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "32"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                     (rule "expand_subJint" (formula "26") (term "0,0,1"))
                     (rule "polySimp_elimSub" (formula "26") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "26") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1"))
                     (rule "expand_subJint" (formula "27") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "27") (term "0,0,0"))
                     (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,0,0"))
                     (rule "expand_subJint" (formula "26") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "26") (term "0,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0,0"))
                     (rule "expand_addJint" (formula "17") (term "1"))
                     (rule "polySimp_addComm0" (formula "17") (term "0,1"))
                     (rule "expand_addJint" (formula "15") (term "0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                     (rule "expand_addJint" (formula "16") (term "0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                     (rule "expand_addJint" (formula "10") (term "1,1,1,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,1,1,1,0,1,0,0,0"))
                     (rule "expand_moduloInteger" (formula "26") (term "0,0,1"))
                     (rule "replace_int_RANGE" (formula "26") (term "1,1,0,0,1"))
                     (rule "replace_int_HALFRANGE" (formula "26") (term "0,0,1,0,0,1"))
                     (rule "replace_int_MIN" (formula "26") (term "0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1,0,0,1"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0,0,1"))
                     (rule "mod_axiom" (formula "26") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1"))
                     (rule "add_literals" (formula "26") (term "0,0,0,0,1"))
                     (rule "expand_moduloInteger" (formula "27") (term "0,0"))
                     (rule "replace_int_RANGE" (formula "27") (term "1,1,0,0"))
                     (rule "replace_int_MIN" (formula "27") (term "0,0,0"))
                     (rule "replace_int_HALFRANGE" (formula "27") (term "0,0,1,0,0"))
                     (rule "polySimp_homoEq" (formula "27") (term "0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,1,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0"))
                     (rule "mod_axiom" (formula "27") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "27") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "27") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                     (rule "expand_moduloInteger" (formula "26") (term "0,0"))
                     (rule "replace_int_MIN" (formula "26") (term "0,0,0"))
                     (rule "replace_int_HALFRANGE" (formula "26") (term "0,0,1,0,0"))
                     (rule "replace_int_RANGE" (formula "26") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                     (rule "mod_axiom" (formula "26") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "26") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                     (rule "expand_moduloInteger" (formula "17") (term "1"))
                     (rule "replace_int_RANGE" (formula "17") (term "1,1,1"))
                     (rule "replace_int_HALFRANGE" (formula "17") (term "0,0,1,1"))
                     (rule "replace_int_MIN" (formula "17") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,1,1"))
                     (rule "add_literals" (formula "17") (term "0,0,1,1"))
                     (rule "mod_axiom" (formula "17") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
                     (rule "add_literals" (formula "17") (term "0,0,1"))
                     (rule "polyDiv_pullOut" (formula "17") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "17") (term "0,0,1,1"))
                     (rule "ifthenelse_false" (formula "17") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,1,1"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,1,1,1"))
                     (rule "add_literals" (formula "17") (term "0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                     (rule "mul_literals" (formula "17") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1"))
                     (rule "add_literals" (formula "17") (term "0,0,1"))
                     (rule "expand_moduloInteger" (formula "15") (term "0"))
                     (rule "replace_int_RANGE" (formula "15") (term "1,1,0"))
                     (rule "replace_int_MIN" (formula "15") (term "0,0"))
                     (rule "replace_int_HALFRANGE" (formula "15") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                     (rule "add_literals" (formula "15") (term "0,0,1,0"))
                     (rule "mod_axiom" (formula "15") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "polyDiv_pullOut" (formula "15") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "15") (term "0,0,0"))
                     (rule "ifthenelse_false" (formula "15") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1,1,0"))
                     (rule "add_literals" (formula "15") (term "0,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "0"))
                     (rule "mul_literals" (formula "15") (term "0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "expand_moduloInteger" (formula "16") (term "0"))
                     (rule "replace_int_MIN" (formula "16") (term "0,0"))
                     (rule "replace_int_RANGE" (formula "16") (term "1,1,0"))
                     (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                     (rule "add_literals" (formula "16") (term "0,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "0,0"))
                     (rule "mod_axiom" (formula "16") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "0,1,0"))
                     (rule "mul_literals" (formula "16") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1"))
                     (rule "polySimp_rightDist" (formula "16") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                     (rule "mul_literals" (formula "16") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                     (rule "polyDiv_pullOut" (formula "16") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "16") (term "0,0,0"))
                     (rule "ifthenelse_false" (formula "16") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "0"))
                     (rule "polySimp_addComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,1,1,0"))
                     (rule "add_literals" (formula "16") (term "0,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "0"))
                     (rule "mul_literals" (formula "16") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "expand_moduloInteger" (formula "10") (term "1,1,1,0,1,0,0,0"))
                     (rule "replace_int_MIN" (formula "10") (term "0,1,1,1,0,1,0,0,0"))
                     (rule "replace_int_RANGE" (formula "10") (term "1,1,1,1,1,0,1,0,0,0"))
                     (rule "replace_int_HALFRANGE" (formula "10") (term "0,0,1,1,1,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,1,1,1,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,1,1,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,1,1,0,1,0,0,0"))
                     (rule "mod_axiom" (formula "10") (term "1,1,1,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,1,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,1,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,1,1,0,1,0,0,0"))
                     (rule "polyDiv_pullOut" (formula "10") (term "0,1,1,1,0,1,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1,1,1,0,1,0,0,0"))
                     (rule "equal_literals" (formula "10") (term "0,0,1,1,1,0,1,0,0,0"))
                     (rule "ifthenelse_false" (formula "10") (term "0,1,1,1,0,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0,1,1,1,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,1,1,1,0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,1,1,1,1,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,1,1,1,1,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,1,0,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,1,1,0,1,0,0,0"))
                     (rule "expand_divJint" (formula "26") (term "0,1"))
                     (rule "expand_moduloInteger" (formula "26") (term "0,1"))
                     (rule "replace_int_RANGE" (formula "26") (term "1,1,0,1"))
                     (rule "replace_int_HALFRANGE" (formula "26") (term "0,0,1,0,1"))
                     (rule "replace_int_MIN" (formula "26") (term "0,0,1"))
                     (rule "polySimp_homoEq" (formula "26") (term "1"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "26") (term "0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "26") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "0,1"))
                     (rule "commute_and" (formula "14") (term "0,0"))
                     (rule "commute_and" (formula "13") (term "0,0"))
                     (rule "commute_and" (formula "12") (term "0,0"))
                     (rule "commute_and" (formula "11") (term "0,0"))
                     (rule "commute_and" (formula "9") (term "0,0"))
                     (rule "commute_and" (formula "8") (term "0,0"))
                     (rule "commute_and" (formula "7") (term "0,0"))
                     (rule "commute_and" (formula "6") (term "0,0"))
                     (rule "commute_and" (formula "5") (term "0,0"))
                     (rule "commute_and" (formula "4") (term "0,0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "commute_and" (formula "1") (term "0,0"))
                     (rule "cut_direct" (formula "27") (term "1"))
                     (branch "CUT: result = -1 TRUE"
                        (rule "concrete_impl_4" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "26"))
                        (rule "add_literals" (formula "15") (term "0,0,0"))
                        (rule "div_literals" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "0,0"))
                        (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "26"))
                        (rule "add_literals" (formula "16") (term "1"))
                        (rule "applyEq" (formula "16") (term "1,0,0,0") (ifseqformula "26"))
                        (rule "add_literals" (formula "16") (term "0,0,0"))
                        (rule "div_literals" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0"))
                        (rule "qeq_literals" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "applyEq" (formula "10") (term "1,0,0,1,1,1,0,1,0,0,0") (ifseqformula "25"))
                        (rule "add_literals" (formula "10") (term "0,0,1,1,1,0,1,0,0,0"))
                        (rule "div_literals" (formula "10") (term "0,1,1,1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,1,0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "1,1,0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,1,1,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,1,0,0,0"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "25"))
                        (rule "leq_literals" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "24"))
                        (rule "add_literals" (formula "15") (term "0"))
                        (rule "qeq_literals" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "10") (term "1,1,0,1,0,0,0") (ifseqformula "23"))
                        (rule "applyEq" (formula "15") (term "1,0,0,1,1") (ifseqformula "23"))
                        (rule "add_literals" (formula "15") (term "0,0,1,1"))
                        (rule "div_literals" (formula "15") (term "0,1,1"))
                        (rule "mul_literals" (formula "15") (term "1,1"))
                        (rule "polySimp_addComm1" (formula "15") (term "1"))
                        (rule "add_literals" (formula "15") (term "0,1"))
                        (rule "applyEq" (formula "22") (term "1,1,1") (ifseqformula "23"))
                        (rule "add_literals" (formula "22") (term "1,1"))
                        (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "23"))
                        (rule "add_literals" (formula "15") (term "1"))
                        (rule "cut_direct" (formula "29") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                           (rule "concrete_not_1" (formula "30") (term "0"))
                           (rule "concrete_and_2" (formula "30"))
                           (rule "false_right" (formula "30"))
                           (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "29"))
                           (rule "concrete_and_4" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "4") (term "1,0,0"))
                           (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "28"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "10") (term "1,0,0"))
                           (rule "replace_known_right" (formula "10") (term "1,0,0") (ifseqformula "25"))
                           (rule "concrete_and_4" (formula "10") (term "0,0"))
                           (rule "ifthenelse_false" (formula "10") (term "0"))
                           (rule "applyEqReverse" (formula "11") (term "2,0") (ifseqformula "10"))
                           (rule "hideAuxiliaryEq" (formula "10"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "26"))
                           (rule "concrete_and_4" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "25"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEqRigid" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "6") (term "1,0,0"))
                           (rule "replace_known_right" (formula "6") (term "1,0,0") (ifseqformula "22"))
                           (rule "concrete_and_4" (formula "6") (term "0,0"))
                           (rule "ifthenelse_false" (formula "6") (term "0"))
                           (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "4") (term "1,0,0"))
                           (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "21"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "20"))
                           (rule "concrete_and_4" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "22") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "21"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "0,0,0,0"))
                           (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "18"))
                           (rule "concrete_and_2" (formula "3") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "17"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "18"))
                           (rule "concrete_and_4" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "17"))
                           (rule "concrete_and_4" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "16"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "close" (formula "17") (ifseqformula "2"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                           (rule "concrete_not_2" (formula "30") (term "0"))
                           (rule "concrete_and_1" (formula "30"))
                           (rule "notRight" (formula "30"))
                           (rule "div_axiom" (formula "23") (term "0,0,0") (inst "quotient=quotient_0"))
                           (rule "mul_literals" (formula "23") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "23") (term "0,1,1"))
                           (rule "ifthenelse_true_for" (formula "23") (term "1,1"))
                           (rule "equal_literals" (formula "23") (term "0"))
                           (rule "concrete_or_2" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                           (rule "add_literals" (formula "25") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "25") (term "1"))
                           (rule "add_literals" (formula "25") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "25"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "25") (term "0"))
                           (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                           (rule "applyEq" (formula "26") (term "0,1,0,1,0,0,1") (ifseqformula "23"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "mul_literals" (formula "24") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1"))
                           (rule "polySimp_rightDist" (formula "25") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                           (rule "mul_literals" (formula "25") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "20"))
                           (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "24") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0"))
                           (rule "neg_literal" (formula "24") (term "0,0,0,0,0,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "24") (term "0,0"))
                           (rule "concrete_or_2" (formula "24") (term "0"))
                           (rule "polySimp_addLiterals" (formula "24") (term "0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0"))
                           (rule "qeq_literals" (formula "24") (term "0"))
                           (rule "concrete_or_2" (formula "24"))
                           (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "26"))
                           (rule "times_zero_1" (formula "22") (term "0,0"))
                           (rule "add_zero_left" (formula "22") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                           (rule "mul_literals" (formula "22") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "22") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "22") (term "0,0"))
                           (rule "concrete_or_2" (formula "22") (term "0"))
                           (rule "polySimp_addLiterals" (formula "22") (term "0,0,0,0"))
                           (rule "add_literals" (formula "22") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                           (rule "add_literals" (formula "22") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0"))
                           (rule "add_literals" (formula "22") (term "0,0"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (rule "concrete_or_2" (formula "22"))
                           (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "25"))
                           (rule "applyEq" (formula "29") (term "0,1,1,0") (ifseqformula "22"))
                           (rule "times_zero_2" (formula "29") (term "1,1,0"))
                           (rule "add_zero_right" (formula "29") (term "1,0"))
                           (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "22"))
                           (rule "qeq_literals" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "applyEq" (formula "27") (term "0,1,1") (ifseqformula "22"))
                           (rule "mul_literals" (formula "27") (term "1,1"))
                           (rule "add_zero_right" (formula "27") (term "1"))
                           (rule "applyEq" (formula "26") (term "0,1,1") (ifseqformula "22"))
                           (rule "times_zero_2" (formula "26") (term "1,1"))
                           (rule "add_zero_right" (formula "26") (term "1"))
                           (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "22"))
                           (rule "leq_literals" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "22"))
                           (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0,1") (ifseqformula "22"))
                           (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0,1"))
                           (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,1"))
                           (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "20"))
                           (rule "leq_literals" (formula "26") (term "0"))
                           (rule "concrete_or_1" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "23"))
                           (rule "leq_literals" (formula "25") (term "0"))
                           (rule "concrete_or_1" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "commute_and_2" (formula "11") (term "0,1,0,0,0"))
                           (rule "inEqSimp_and_contradInEq1" (formula "11") (term "0,1,0,0,0"))
                           (rule "qeq_literals" (formula "11") (term "1,0,1,0,0,0"))
                           (rule "concrete_and_4" (formula "11") (term "0,1,0,0,0"))
                           (rule "ex_unused" (formula "11") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "11") (term "0,0"))
                           (rule "ifthenelse_false" (formula "11") (term "0"))
                           (rule "applyEqReverse" (formula "12") (term "2,0") (ifseqformula "11"))
                           (rule "hideAuxiliaryEq" (formula "11"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "f_0 = java.lang.Object::<created> & o_0 = b_1 TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "2"))
                              (rule "concrete_and_1" (formula "8") (term "0,0"))
                              (rule "replace_known_left" (formula "15") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "15") (term "0,0"))
                              (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "13") (term "0,0"))
                              (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "14") (term "0,0"))
                              (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "7") (term "0,0"))
                              (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "3"))
                              (rule "eqSymm" (formula "8") (term "0,0"))
                              (rule "sortsDisjointModuloNull" (formula "8") (term "0,0"))
                              (rule "replace_known_right" (formula "8") (term "1,0,0") (ifseqformula "31"))
                              (rule "concrete_and_4" (formula "8") (term "0,0"))
                              (rule "ifthenelse_false" (formula "8") (term "0"))
                              (rule "applyEqReverse" (formula "9") (term "2,0") (ifseqformula "8"))
                              (rule "hideAuxiliaryEq" (formula "8"))
                              (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "14") (term "0,0"))
                              (rule "ifthenelse_false" (formula "14") (term "0"))
                              (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "14"))
                              (rule "hideAuxiliaryEq" (formula "14"))
                              (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "3"))
                              (rule "applyEqRigid" (formula "8") (term "0,0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "8") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "8") (term "0,0"))
                              (rule "ifthenelse_false" (formula "8") (term "0"))
                              (rule "applyEqReverse" (formula "9") (term "2,0") (ifseqformula "8"))
                              (rule "hideAuxiliaryEq" (formula "8"))
                              (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "9") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "9") (term "0,0"))
                              (rule "ifthenelse_false" (formula "9") (term "0"))
                              (rule "applyEqReverse" (formula "10") (term "2,0") (ifseqformula "9"))
                              (rule "hideAuxiliaryEq" (formula "9"))
                              (rule "applyEqRigid" (formula "9") (term "0,0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "9") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "9") (term "0,0"))
                              (rule "ifthenelse_false" (formula "9") (term "0"))
                              (rule "applyEqReverse" (formula "10") (term "2,0") (ifseqformula "9"))
                              (rule "hideAuxiliaryEq" (formula "9"))
                              (rule "applyEqRigid" (formula "9") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "9") (term "0,0"))
                              (rule "ifthenelse_false" (formula "9") (term "0"))
                              (rule "applyEqReverse" (formula "10") (term "2,0") (ifseqformula "9"))
                              (rule "hideAuxiliaryEq" (formula "9"))
                              (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "9") (term "0,0"))
                              (rule "ifthenelse_false" (formula "9") (term "0"))
                              (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "9"))
                              (rule "hideAuxiliaryEq" (formula "9"))
                              (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEqRigid" (formula "7") (term "0,0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "7") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0,0"))
                              (rule "ifthenelse_false" (formula "7") (term "0"))
                              (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "7"))
                              (rule "hideAuxiliaryEq" (formula "7"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "close" (formula "21") (ifseqformula "1"))
                           )
                           (branch "f_0 = java.lang.Object::<created> & o_0 = b_1 FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "jdiv_axiom" (formula "23") (term "1,0,0,1"))
                              (rule "eqSymm" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "0,0,2,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "0,0,2,0"))
                              (rule "mul_literals" (formula "23") (term "0,0,0,2,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0"))
                              (rule "div_axiom" (formula "23") (term "1,0") (inst "quotient=quotient_1"))
                              (rule "qeq_literals" (formula "23") (term "0,1,1"))
                              (rule "ifthenelse_true_for" (formula "23") (term "1,1"))
                              (rule "equal_literals" (formula "23") (term "0"))
                              (rule "concrete_or_2" (formula "23"))
                              (rule "mul_literals" (formula "23") (term "1,1,1"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "add_zero_left" (formula "25") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "25") (term "1"))
                              (rule "inEqSimp_homoInEq0" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "23"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                              (rule "mul_literals" (formula "24") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "25"))
                              (rule "mul_literals" (formula "21") (term "0,0"))
                              (rule "add_zero_left" (formula "21") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                              (rule "mul_literals" (formula "21") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "21") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "21") (term "0,0"))
                              (rule "concrete_or_2" (formula "21") (term "0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0"))
                              (rule "leq_literals" (formula "21") (term "0"))
                              (rule "concrete_or_2" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "18"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                              (rule "neg_literal" (formula "25") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "25") (term "0,0"))
                              (rule "concrete_or_2" (formula "25") (term "0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "25") (term "0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0"))
                              (rule "qeq_literals" (formula "25") (term "0"))
                              (rule "concrete_or_2" (formula "25"))
                              (rule "div_axiom" (formula "28") (term "0,2,0") (inst "quotient=quotient_2"))
                              (rule "qeq_literals" (formula "28") (term "0,1,1"))
                              (rule "ifthenelse_true_for" (formula "28") (term "1,1"))
                              (rule "equal_literals" (formula "28") (term "0"))
                              (rule "concrete_or_2" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1,1,1"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,1"))
                              (rule "add_literals" (formula "30") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "30") (term "1"))
                              (rule "add_literals" (formula "30") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "applyEq" (formula "31") (term "0,2,0") (ifseqformula "28"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "29"))
                              (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                              (rule "mul_literals" (formula "26") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "26") (term "0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "26"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "26") (inst "elimGcdRightDiv=mul(quotient_2, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,1,0"))
                              (rule "neg_literal" (formula "26") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "26") (term "0,0"))
                              (rule "concrete_or_2" (formula "26") (term "0"))
                              (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0"))
                              (rule "polySimp_mulAssoc" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0"))
                              (rule "qeq_literals" (formula "26") (term "0"))
                              (rule "concrete_or_2" (formula "26"))
                              (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "18"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0"))
                              (rule "add_literals" (formula "31") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                              (rule "mul_literals" (formula "31") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "31") (inst "elimGcdRightDiv=Z(neglit(2(3(4(4(5(5(3(3(#))))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "31") (term "0,0"))
                              (rule "concrete_or_2" (formula "31") (term "0"))
                              (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "31") (term "0,0,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0"))
                              (rule "leq_literals" (formula "31") (term "0"))
                              (rule "concrete_or_2" (formula "31"))
                              (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "30"))
                              (rule "times_zero_1" (formula "22") (term "0,0"))
                              (rule "add_zero_left" (formula "22") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "22") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0"))
                              (rule "neg_literal" (formula "22") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "22") (term "0,0"))
                              (rule "concrete_or_2" (formula "22") (term "0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "22") (term "0,0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                              (rule "add_literals" (formula "22") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0"))
                              (rule "qeq_literals" (formula "22") (term "0"))
                              (rule "concrete_or_2" (formula "22"))
                              (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "29"))
                              (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                              (rule "mul_literals" (formula "33") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1"))
                              (rule "polySimp_rightDist" (formula "33") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                              (rule "mul_literals" (formula "33") (term "0,1"))
                              (rule "elimGcdGeq_antec" (formula "33") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_2, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "leq_literals" (formula "33") (term "0,0"))
                              (rule "concrete_or_2" (formula "33") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                              (rule "add_literals" (formula "33") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0"))
                              (rule "leq_literals" (formula "33") (term "0"))
                              (rule "concrete_or_2" (formula "33"))
                              (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "27"))
                              (rule "mul_literals" (formula "21") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                              (rule "polySimp_elimOne" (formula "21") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "23"))
                              (rule "leq_literals" (formula "21") (term "0"))
                              (rule "concrete_or_1" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "26"))
                              (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                              (rule "mul_literals" (formula "33") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0"))
                              (rule "add_literals" (formula "33") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                              (rule "mul_literals" (formula "33") (term "1"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = b_1 TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "12") (term "0,0"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_1" (formula "11") (term "0,0"))
                                 (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "14") (term "0,0"))
                                 (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_1" (formula "10") (term "0,0"))
                                 (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "13") (term "0,0"))
                                 (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                                 (rule "ifthenelse_true" (formula "14") (term "0"))
                                 (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "14"))
                                 (rule "hideAuxiliaryEq" (formula "14"))
                                 (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "39"))
                                 (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "39"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEqRigid" (formula "7") (term "0,0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "6") (term "0,0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "38") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = b_1 FALSE"
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "38"))
                                 (rule "ifthenelse_false" (formula "12") (term "0"))
                                 (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "12"))
                                 (rule "hideAuxiliaryEq" (formula "12"))
                                 (rule "cut_direct" (formula "38") (term "1"))
                                 (branch "CUT: o_0 = b_1 TRUE"
                                    (rule "concrete_and_3" (formula "39"))
                                    (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "11") (term "0,0"))
                                    (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "12") (term "0,0"))
                                    (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "39"))
                                    (rule "concrete_and_2" (formula "6") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "6") (term "0"))
                                    (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "4") (term "0,0"))
                                    (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "5") (term "0,0"))
                                    (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "3") (term "0,0"))
                                    (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "37"))
                                    (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "37"))
                                    (rule "concrete_and_2" (formula "9") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "9") (term "0"))
                                    (rule "applyEqReverse" (formula "10") (term "2,0") (ifseqformula "9"))
                                    (rule "hideAuxiliaryEq" (formula "9"))
                                    (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "36"))
                                    (rule "concrete_and_2" (formula "8") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "8") (term "0"))
                                    (rule "applyEqReverse" (formula "9") (term "2,0") (ifseqformula "8"))
                                    (rule "hideAuxiliaryEq" (formula "8"))
                                    (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "41") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "7") (term "1,0,0"))
                                    (rule "sortsDisjointModuloNull" (formula "7") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "7") (term "1,1,0,0") (ifseqformula "40"))
                                    (rule "concrete_and_4" (formula "7") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "7") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "7") (term "0"))
                                    (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                    (rule "hideAuxiliaryEq" (formula "7"))
                                    (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "6") (term "1,0,0"))
                                    (rule "sortsDisjointModuloNull" (formula "6") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "37"))
                                    (rule "concrete_and_2" (formula "6") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "6") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "6") (term "0"))
                                    (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "37") (ifseqformula "2"))
                                 )
                                 (branch "CUT: o_0 = b_1 FALSE"
                                    (rule "concrete_and_4" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "replace_known_right" (formula "11") (term "1,0,0") (ifseqformula "38"))
                                    (rule "concrete_and_4" (formula "11") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "11") (term "0"))
                                    (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "replace_known_right" (formula "10") (term "1,0,0") (ifseqformula "37"))
                                    (rule "concrete_and_4" (formula "10") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "10") (term "0"))
                                    (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "10"))
                                    (rule "hideAuxiliaryEq" (formula "10"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "36"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "35"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "34"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "33"))
                                    (rule "concrete_and_4" (formula "32"))
                                    (rule "false_right" (formula "32"))
                                    (rule "cut_direct" (formula "29") (term "0"))
                                    (branch "CUT: nbits >= 1 TRUE"
                                       (rule "concrete_impl_1" (formula "30"))
                                       (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "29"))
                                       (rule "ifthenelse_true" (formula "28") (term "0"))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                                       (rule "mod_axiom" (formula "30") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "30"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "0,1,0"))
                                       (rule "mul_literals" (formula "30") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "30"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                       (rule "mul_literals" (formula "30") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "29"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                       (rule "concrete_or_1" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "newSym_eq" (formula "29") (inst "l=l_0") (inst "newSymDef=add(Z(0(#)), mul(quotient_1, Z(0(#))))"))
                                       (rule "times_zero_1" (formula "29") (term "1,1,1"))
                                       (rule "add_literals" (formula "29") (term "1,1"))
                                       (rule "add_zero_right" (formula "29") (term "1"))
                                       (rule "applyEqRigid" (formula "30") (term "0,0") (ifseqformula "29"))
                                       (rule "polySimp_homoEq" (formula "30"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "30") (term "0"))
                                       (rule "polySimp_sepPosMonomial" (formula "30"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1"))
                                       (rule "mul_literals" (formula "30") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                       (rule "applyEq" (formula "20") (term "0,1,1") (ifseqformula "30"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                                       (rule "mul_literals" (formula "20") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "1"))
                                       (rule "add_literals" (formula "20") (term "0,1"))
                                       (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "30"))
                                       (rule "inEqSimp_homoInEq0" (formula "18"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                       (rule "add_literals" (formula "18") (term "0,0"))
                                       (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "30"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                       (rule "mul_literals" (formula "21") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "1"))
                                       (rule "add_literals" (formula "21") (term "0,1"))
                                       (rule "add_zero_left" (formula "21") (term "1"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "30"))
                                       (rule "inEqSimp_commuteLeq" (formula "19"))
                                       (rule "inEqSimp_homoInEq1" (formula "19"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,0"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "30"))
                                       (rule "inEqSimp_homoInEq1" (formula "14"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                       (rule "add_literals" (formula "14") (term "0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0"))
                                       (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "30"))
                                       (rule "inEqSimp_homoInEq1" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "25") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0,0"))
                                       (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "30"))
                                       (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                                       (rule "add_literals" (formula "29") (term "0,0,0"))
                                       (rule "applyEq" (formula "27") (term "1") (ifseqformula "30"))
                                       (rule "applyEq" (formula "17") (term "1") (ifseqformula "30"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                       (rule "mul_literals" (formula "19") (term "0,1"))
                                       (rule "inEqSimp_invertInEq0" (formula "14"))
                                       (rule "mul_literals" (formula "14") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "0"))
                                       (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                                       (rule "leq_literals" (formula "14") (term "0,0"))
                                       (rule "concrete_or_2" (formula "14") (term "0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                       (rule "concrete_or_2" (formula "14"))
                                       (rule "elimGcdLeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0,1,0"))
                                       (rule "leq_literals" (formula "18") (term "0,0"))
                                       (rule "concrete_or_2" (formula "18") (term "0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "neg_literal" (formula "18") (term "0,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                                       (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0"))
                                       (rule "qeq_literals" (formula "18") (term "0"))
                                       (rule "concrete_or_2" (formula "18"))
                                       (rule "polyDiv_pullOut" (formula "29") (term "0") (inst "polyDivCoeff=l_0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,2,0"))
                                       (rule "equal_literals" (formula "29") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "29") (term "0"))
                                       (rule "polySimp_homoEq" (formula "29"))
                                       (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,0,0,1,0"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0,0,1,0"))
                                       (rule "add_literals" (formula "29") (term "0,0,0,1,0"))
                                       (rule "div_literals" (formula "29") (term "0,0,1,0"))
                                       (rule "add_zero_left" (formula "29") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "29") (term "0"))
                                       (rule "add_literals" (formula "29") (term "1,0"))
                                       (rule "times_zero_1" (formula "29") (term "0"))
                                       (rule "eqClose" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "18"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "14"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "19") (term "1,1"))
                                       (rule "add_literals" (formula "19") (term "1"))
                                       (rule "applyEqRigid" (formula "25") (term "0,1") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "25") (term "1"))
                                       (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "21") (term "1"))
                                       (rule "applyEqRigid" (formula "20") (term "0,1,1") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "20") (term "1,1"))
                                       (rule "add_literals" (formula "20") (term "1"))
                                       (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
                                       (rule "qeq_literals" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "applyEq" (formula "26") (term "0,1,1") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "26") (term "1,1"))
                                       (rule "add_literals" (formula "26") (term "1"))
                                       (rule "applyEqRigid" (formula "17") (term "0,1,1") (ifseqformula "14"))
                                       (rule "times_zero_2" (formula "17") (term "1,1"))
                                       (rule "add_literals" (formula "17") (term "1"))
                                       (rule "applyEq" (formula "28") (term "0,1,1") (ifseqformula "14"))
                                       (rule "times_zero_2" (formula "28") (term "1,1"))
                                       (rule "add_literals" (formula "28") (term "1"))
                                       (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "20"))
                                       (rule "leq_literals" (formula "11") (term "0"))
                                       (rule "concrete_or_1" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "26") (term "0"))
                                       (rule "concrete_and_2" (formula "26"))
                                       (rule "closeFalse" (formula "26"))
                                    )
                                    (branch "CUT: nbits >= 1 FALSE"
                                       (rule "concrete_impl_2" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "31"))
                                       (rule "ifthenelse_false" (formula "28") (term "0"))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "inEqSimp_geqRight" (formula "31"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "12") (term "0"))
                                       (rule "concrete_or_1" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "25"))
                                       (rule "mul_literals" (formula "25") (term "1,0"))
                                       (rule "add_zero_right" (formula "25") (term "0"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "15"))
                                       (rule "add_literals" (formula "17") (term "0,0"))
                                       (rule "div_literals" (formula "17") (term "0"))
                                       (rule "eqClose" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                       (rule "qeq_literals" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEq" (formula "21") (term "0,1,0,0") (ifseqformula "15"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0"))
                                       (rule "div_literals" (formula "21") (term "0"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "15"))
                                       (rule "add_literals" (formula "16") (term "0,0"))
                                       (rule "div_literals" (formula "16") (term "0"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "15"))
                                       (rule "add_zero_right" (formula "26") (term "0,0"))
                                       (rule "jdiv_axiom_inline" (formula "26") (term "0"))
                                       (rule "mul_literals" (formula "26") (term "0,0,2,0"))
                                       (rule "div_literals" (formula "26") (term "1,0"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "26") (term "0"))
                                       (rule "div_literals" (formula "26") (term "0,0"))
                                       (rule "mul_literals" (formula "26") (term "0"))
                                       (rule "eqSymm" (formula "26"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq1" (formula "19"))
                                       (rule "mul_literals" (formula "19") (term "1,0"))
                                       (rule "add_zero_right" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq1" (formula "25"))
                                       (rule "mul_literals" (formula "25") (term "1,0"))
                                       (rule "add_zero_right" (formula "25") (term "0"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "20"))
                                       (rule "mul_literals" (formula "20") (term "1,0"))
                                       (rule "add_zero_right" (formula "20") (term "0"))
                                       (rule "applyEqRigid" (formula "19") (term "0,1,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "19") (term "1,0"))
                                       (rule "add_literals" (formula "19") (term "0"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEqRigid" (formula "25") (term "0,0") (ifseqformula "20"))
                                       (rule "mul_literals" (formula "25") (term "0"))
                                       (rule "eqClose" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "20"))
                                       (rule "times_zero_2" (formula "18") (term "1"))
                                       (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "20"))
                                       (rule "mul_literals" (formula "23") (term "1,1"))
                                       (rule "add_literals" (formula "23") (term "1"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "20") (term "0,1,0") (ifseqformula "19"))
                                       (rule "mul_literals" (formula "20") (term "1,0"))
                                       (rule "add_literals" (formula "20") (term "0"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "applyEqRigid" (formula "16") (term "0,1,0") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "16") (term "1,0"))
                                       (rule "add_literals" (formula "16") (term "0"))
                                       (rule "qeq_literals" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEqRigid" (formula "17") (term "0,1,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "17") (term "1,0"))
                                       (rule "add_literals" (formula "17") (term "0"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
                                       (rule "leq_literals" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "4") (term "0,0"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "5") (term "0,0"))
                                          (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "6") (term "0,0"))
                                          (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "7") (term "0,0"))
                                          (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "6") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "6") (term "0"))
                                          (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                          (rule "hideAuxiliaryEq" (formula "6"))
                                          (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "5") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "5") (term "0"))
                                          (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                          (rule "hideAuxiliaryEq" (formula "5"))
                                          (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "23") (term "0") (ifseqformula "9"))
                                          (rule "eqSymm" (formula "23"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "close" (formula "18") (ifseqformula "1"))
                                       )
                                       (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 FALSE"
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "6") (term "0,0"))
                                             (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "5") (term "0,0"))
                                             (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "4") (term "0,0"))
                                             (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "18"))
                                             (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "5") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "5") (term "0"))
                                             (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "5") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "5") (term "0"))
                                             (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "3"))
                                             (rule "sortsDisjointModuloNull" (formula "17"))
                                             (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "19"))
                                             (rule "concrete_and_2" (formula "17"))
                                             (rule "false_right" (formula "17"))
                                             (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "4") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "4") (term "0"))
                                             (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "applyEq" (formula "20") (term "0") (ifseqformula "3"))
                                             (rule "applyEqRigid" (formula "20") (term "2,0") (ifseqformula "2"))
                                             (rule "narrowSelectType" (formula "20") (term "0") (ifseqformula "7"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                             (rule "close" (formula "16") (ifseqformula "1"))
                                          )
                                          (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                                (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                (rule "concrete_and_3" (formula "4") (term "0,0"))
                                                (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "3"))
                                                (rule "concrete_and_3" (formula "17"))
                                                (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "3"))
                                                (rule "concrete_and_3" (formula "16"))
                                                (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                (rule "equalUnique" (formula "4") (term "0,0"))
                                                (rule "ifthenelse_false" (formula "4") (term "0"))
                                                (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "2"))
                                                (rule "equalUnique" (formula "16"))
                                                (rule "false_right" (formula "16"))
                                                (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "2"))
                                                (rule "narrowSelectType" (formula "22") (term "0") (ifseqformula "7"))
                                                (rule "false_to_not_true" (formula "22"))
                                                (rule "notRight" (formula "22"))
                                                (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "4"))
                                                (rule "close" (formula "18") (ifseqformula "2"))
                                             )
                                             (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 TRUE"
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                   (rule "concrete_and_3" (formula "4") (term "0,0"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "2"))
                                                   (rule "ifthenelse_true" (formula "4") (term "0"))
                                                   (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "3"))
                                                   (rule "concrete_and_3" (formula "15"))
                                                   (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "3"))
                                                   (rule "concrete_and_3" (formula "17"))
                                                   (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "3"))
                                                   (rule "concrete_and_3" (formula "16"))
                                                   (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "2"))
                                                   (rule "equalUnique" (formula "15"))
                                                   (rule "false_right" (formula "15"))
                                                   (rule "applyEq" (formula "16") (term "0") (ifseqformula "2"))
                                                   (rule "equalUnique" (formula "16"))
                                                   (rule "false_right" (formula "16"))
                                                   (rule "applyEq" (formula "15") (term "0") (ifseqformula "2"))
                                                   (rule "equalUnique" (formula "15"))
                                                   (rule "false_right" (formula "15"))
                                                   (rule "applyEqRigid" (formula "21") (term "2,0") (ifseqformula "2"))
                                                   (rule "narrowSelectType" (formula "21") (term "0") (ifseqformula "7"))
                                                   (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
                                                   (rule "sortsDisjointModuloNull" (formula "15"))
                                                   (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "17"))
                                                   (rule "concrete_and_2" (formula "15"))
                                                   (rule "false_right" (formula "15"))
                                                   (rule "applyEq" (formula "19") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                   (rule "close" (formula "15") (ifseqformula "1"))
                                                )
                                                (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 FALSE"
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "14"))
                                                   (rule "ifthenelse_false" (formula "2") (term "0"))
                                                   (rule "close" (formula "24") (ifseqformula "2"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: result = -1 FALSE"
                        (rule "concrete_impl_3" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "cut_direct" (formula "34") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                           (rule "concrete_not_1" (formula "35") (term "0"))
                           (rule "concrete_and_2" (formula "35"))
                           (rule "false_right" (formula "35"))
                           (rule "applyEq" (formula "8") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "8") (term "1,0,0"))
                           (rule "replace_known_right" (formula "8") (term "1,0,0") (ifseqformula "32"))
                           (rule "concrete_and_4" (formula "8") (term "0,0"))
                           (rule "ifthenelse_false" (formula "8") (term "0"))
                           (rule "applyEqReverse" (formula "9") (term "2,0") (ifseqformula "8"))
                           (rule "hideAuxiliaryEq" (formula "8"))
                           (rule "applyEqRigid" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "14") (term "1,0,0"))
                           (rule "replace_known_right" (formula "14") (term "1,0,0") (ifseqformula "33"))
                           (rule "concrete_and_4" (formula "14") (term "0,0"))
                           (rule "ifthenelse_false" (formula "14") (term "0"))
                           (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "14"))
                           (rule "hideAuxiliaryEq" (formula "14"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "11") (term "1,0,0"))
                           (rule "replace_known_right" (formula "11") (term "1,0,0") (ifseqformula "30"))
                           (rule "concrete_and_4" (formula "11") (term "0,0"))
                           (rule "ifthenelse_false" (formula "11") (term "0"))
                           (rule "applyEqReverse" (formula "12") (term "2,0") (ifseqformula "11"))
                           (rule "hideAuxiliaryEq" (formula "11"))
                           (rule "applyEqRigid" (formula "12") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "12") (term "1,0,0"))
                           (rule "replace_known_right" (formula "12") (term "1,0,0") (ifseqformula "31"))
                           (rule "concrete_and_4" (formula "12") (term "0,0"))
                           (rule "ifthenelse_false" (formula "12") (term "0"))
                           (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "12"))
                           (rule "hideAuxiliaryEq" (formula "12"))
                           (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "30"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEqRigid" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "6") (term "1,0,0"))
                           (rule "replace_known_right" (formula "6") (term "1,0,0") (ifseqformula "27"))
                           (rule "concrete_and_4" (formula "6") (term "0,0"))
                           (rule "ifthenelse_false" (formula "6") (term "0"))
                           (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "9") (term "1,0,0"))
                           (rule "replace_known_right" (formula "9") (term "1,0,0") (ifseqformula "28"))
                           (rule "concrete_and_4" (formula "9") (term "0,0"))
                           (rule "ifthenelse_false" (formula "9") (term "0"))
                           (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "9"))
                           (rule "hideAuxiliaryEq" (formula "9"))
                           (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "7") (term "1,0,0"))
                           (rule "replace_known_right" (formula "7") (term "1,0,0") (ifseqformula "25"))
                           (rule "concrete_and_4" (formula "7") (term "0,0"))
                           (rule "ifthenelse_false" (formula "7") (term "0"))
                           (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                           (rule "hideAuxiliaryEq" (formula "7"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "26"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEqRigid" (formula "6") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "6") (term "0,0,0,0"))
                           (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "23"))
                           (rule "concrete_and_2" (formula "6") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "6") (term "0,0"))
                           (rule "ifthenelse_false" (formula "6") (term "0"))
                           (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "24"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "23"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "22"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "eqSymm" (formula "21"))
                           (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "1"))
                           (rule "eqClose" (formula "21"))
                           (rule "closeTrue" (formula "21"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                           (rule "concrete_not_2" (formula "35") (term "0"))
                           (rule "concrete_and_1" (formula "35"))
                           (rule "notRight" (formula "35"))
                           (rule "div_axiom" (formula "27") (term "0,0,0") (inst "quotient=quotient_0"))
                           (rule "equal_literals" (formula "27") (term "0"))
                           (rule "concrete_or_2" (formula "27"))
                           (rule "mul_literals" (formula "27") (term "1,1,1,1"))
                           (rule "qeq_literals" (formula "27") (term "0,1"))
                           (rule "ifthenelse_true_for" (formula "27") (term "1"))
                           (rule "andLeft" (formula "27"))
                           (rule "andLeft" (formula "27"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
                           (rule "add_literals" (formula "29") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "29") (term "1"))
                           (rule "add_literals" (formula "29") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0"))
                           (rule "applyEq" (formula "30") (term "0,1,0,1,0,0,1") (ifseqformula "27"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,1"))
                           (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "27"))
                           (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "32"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                           (rule "mul_literals" (formula "28") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                           (rule "mul_literals" (formula "29") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "29"))
                           (rule "times_zero_1" (formula "24") (term "0,0"))
                           (rule "add_zero_left" (formula "24") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                           (rule "mul_literals" (formula "24") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "24") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "24") (term "0,0"))
                           (rule "concrete_or_2" (formula "24") (term "0"))
                           (rule "polySimp_addLiterals" (formula "24") (term "0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0"))
                           (rule "leq_literals" (formula "24") (term "0"))
                           (rule "concrete_or_2" (formula "24"))
                           (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "22"))
                           (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                           (rule "mul_literals" (formula "29") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "29") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "29") (term "0,0"))
                           (rule "concrete_or_2" (formula "29") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "29") (term "0,0,0,0"))
                           (rule "neg_literal" (formula "29") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                           (rule "add_literals" (formula "29") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0"))
                           (rule "qeq_literals" (formula "29") (term "0"))
                           (rule "concrete_or_2" (formula "29"))
                           (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "29"))
                           (rule "applyEqRigid" (formula "33") (term "0,1,1,0") (ifseqformula "24"))
                           (rule "times_zero_2" (formula "33") (term "1,1,0"))
                           (rule "add_zero_right" (formula "33") (term "1,0"))
                           (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "24"))
                           (rule "leq_literals" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                           (rule "qeq_literals" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "applyEq" (formula "29") (term "0,1,1") (ifseqformula "24"))
                           (rule "mul_literals" (formula "29") (term "1,1"))
                           (rule "add_zero_right" (formula "29") (term "1"))
                           (rule "applyEq" (formula "30") (term "0,1,1") (ifseqformula "24"))
                           (rule "times_zero_2" (formula "30") (term "1,1"))
                           (rule "add_literals" (formula "30") (term "1"))
                           (rule "applyEqRigid" (formula "31") (term "0,1,0,0,1,0,0,1") (ifseqformula "24"))
                           (rule "times_zero_2" (formula "31") (term "1,0,0,1,0,0,1"))
                           (rule "add_literals" (formula "31") (term "0,0,1,0,0,1"))
                           (rule "applyEqRigid" (formula "28") (term "1") (ifseqformula "24"))
                           (rule "applyEqRigid" (formula "33") (term "0,1") (ifseqformula "24"))
                           (rule "mul_literals" (formula "33") (term "1"))
                           (rule "inEqSimp_strengthen1" (formula "25") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "25") (term "1"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "25"))
                           (rule "concrete_impl_1" (formula "31"))
                           (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "25"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0"))
                           (rule "leq_literals" (formula "33") (term "0"))
                           (rule "concrete_and_2" (formula "33"))
                           (rule "false_right" (formula "33"))
                           (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "25"))
                           (rule "leq_literals" (formula "29") (term "0"))
                           (rule "concrete_or_1" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "inEqSimp_subsumption0" (formula "29") (ifseqformula "22"))
                           (rule "leq_literals" (formula "29") (term "0"))
                           (rule "concrete_or_1" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "div_axiom" (formula "18") (term "0,1,1") (inst "quotient=quotient_1"))
                           (rule "equal_literals" (formula "18") (term "0"))
                           (rule "concrete_or_2" (formula "18"))
                           (rule "qeq_literals" (formula "18") (term "0,1"))
                           (rule "ifthenelse_true_for" (formula "18") (term "1"))
                           (rule "mul_literals" (formula "18") (term "1,1,1"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
                           (rule "add_literals" (formula "20") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "20") (term "1"))
                           (rule "add_literals" (formula "20") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "17"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "17") (term "0"))
                           (rule "applyEq" (formula "11") (term "0,1,1,1,0,1,0,0,0") (ifseqformula "17"))
                           (rule "polySimp_addComm1" (formula "11") (term "1,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
                           (rule "inEqSimp_homoInEq0" (formula "16"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0"))
                           (rule "applyEq" (formula "20") (term "0,1,1") (ifseqformula "17"))
                           (rule "polySimp_addComm1" (formula "20") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "mul_literals" (formula "18") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1"))
                           (rule "mul_literals" (formula "16") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "18") (term "0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                           (rule "concrete_or_1" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "18"))
                           (rule "mul_literals" (formula "28") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "28") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "28") (term "0,0"))
                           (rule "concrete_or_2" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "28") (term "0,0,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0"))
                           (rule "leq_literals" (formula "28") (term "0"))
                           (rule "concrete_or_2" (formula "28"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "27"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                           (rule "mul_literals" (formula "16") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,1,0"))
                           (rule "neg_literal" (formula "16") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "16") (term "0,0"))
                           (rule "concrete_or_2" (formula "16") (term "0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0"))
                           (rule "qeq_literals" (formula "16") (term "0"))
                           (rule "concrete_or_2" (formula "16"))
                           (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "29"))
                           (rule "mul_literals" (formula "19") (term "1,1"))
                           (rule "add_literals" (formula "19") (term "1"))
                           (rule "applyEqRigid" (formula "17") (term "0,1,1") (ifseqformula "29"))
                           (rule "mul_literals" (formula "17") (term "1,1"))
                           (rule "add_literals" (formula "17") (term "1"))
                           (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "29"))
                           (rule "leq_literals" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "11") (term "0,1,0,1,1,0,1,0,0,0") (ifseqformula "28"))
                           (rule "mul_literals" (formula "11") (term "1,0,1,1,0,1,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,1,1,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "11") (term "1,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "19") (term "0,1,0,1") (ifseqformula "28"))
                           (rule "mul_literals" (formula "19") (term "1,0,1"))
                           (rule "add_literals" (formula "19") (term "0,1"))
                           (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "33"))
                           (rule "add_literals" (formula "16") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "16"))
                           (rule "mul_literals" (formula "33") (term "1,0,0"))
                           (rule "add_zero_left" (formula "33") (term "0,0"))
                           (rule "leq_literals" (formula "33") (term "0"))
                           (rule "concrete_and_2" (formula "33"))
                           (rule "false_right" (formula "33"))
                           (rule "inEqSimp_subsumption0" (formula "27") (ifseqformula "18"))
                           (rule "leq_literals" (formula "27") (term "0"))
                           (rule "concrete_or_1" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "16"))
                           (rule "leq_literals" (formula "28") (term "0"))
                           (rule "concrete_or_1" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "f_0 = java.lang.Object::<created> & o_0 = b_1 TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "7") (term "0,0"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "16") (term "0,0"))
                              (rule "replace_known_left" (formula "15") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "15") (term "0,0"))
                              (rule "replace_known_left" (formula "12") (term "0,1,0,0") (ifseqformula "2"))
                              (rule "concrete_not_1" (formula "12") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "12") (term "0,0"))
                              (rule "ifthenelse_false" (formula "12") (term "0"))
                              (rule "applyEqReverse" (formula "13") (term "2,0") (ifseqformula "12"))
                              (rule "hideAuxiliaryEq" (formula "12"))
                              (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "13") (term "0,0"))
                              (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "2"))
                              (rule "concrete_and_1" (formula "8") (term "0,0"))
                              (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "3"))
                              (rule "eqSymm" (formula "9") (term "1,0,0"))
                              (rule "sortsDisjointModuloNull" (formula "9") (term "1,0,0"))
                              (rule "replace_known_right" (formula "9") (term "0,1,0,0") (ifseqformula "30"))
                              (rule "concrete_and_2" (formula "9") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "9") (term "0,0"))
                              (rule "ifthenelse_false" (formula "9") (term "0"))
                              (rule "applyEqReverse" (formula "10") (term "2,0") (ifseqformula "9"))
                              (rule "hideAuxiliaryEq" (formula "9"))
                              (rule "applyEq" (formula "33") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "33") (term "0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "33"))
                              (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "11") (term "0,0"))
                              (rule "ifthenelse_false" (formula "11") (term "0"))
                              (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "11"))
                              (rule "hideAuxiliaryEq" (formula "11"))
                              (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "3"))
                              (rule "eqSymm" (formula "6") (term "1,0,0"))
                              (rule "sortsDisjointModuloNull" (formula "6") (term "1,0,0"))
                              (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "27"))
                              (rule "concrete_and_2" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "applyEqRigid" (formula "6") (term "0,0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "6") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "applyEqRigid" (formula "6") (term "0,0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "6") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "3"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "close" (formula "25") (ifseqformula "1"))
                           )
                           (branch "f_0 = java.lang.Object::<created> & o_0 = b_1 FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "jdiv_axiom" (formula "28") (term "1,0,0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,0,2,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "0,0,2,0"))
                              (rule "mul_literals" (formula "28") (term "0,0,0,2,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0"))
                              (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "25"))
                              (rule "ifthenelse_true" (formula "28") (term "0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "28"))
                              (rule "div_axiom" (formula "28") (term "1") (inst "quotient=quotient_2"))
                              (rule "mul_literals" (formula "28") (term "1,1,1,1,1"))
                              (rule "qeq_literals" (formula "28") (term "0,1,1"))
                              (rule "ifthenelse_true_for" (formula "28") (term "1,1"))
                              (rule "equal_literals" (formula "28") (term "0"))
                              (rule "concrete_or_2" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,1"))
                              (rule "add_literals" (formula "30") (term "0,0,1"))
                              (rule "add_zero_left" (formula "30") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "30") (term "1"))
                              (rule "inEqSimp_homoInEq0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "applyEq" (formula "32") (term "1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "31") (term "1") (ifseqformula "28"))
                              (rule "mod_axiom" (formula "32") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "32"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "0,1,0"))
                              (rule "mul_literals" (formula "32") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "32") (term "0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,0"))
                              (rule "add_literals" (formula "32") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "32") (term "0,0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "32"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1"))
                              (rule "polySimp_rightDist" (formula "32") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,1"))
                              (rule "applyEq" (formula "10") (term "1,1,0,1,0,0,0") (ifseqformula "32"))
                              (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "32"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "32"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq0" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0"))
                              (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "32"))
                              (rule "polySimp_addAssoc" (formula "18") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1"))
                              (rule "polySimp_rightDist" (formula "29") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                              (rule "mul_literals" (formula "29") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1"))
                              (rule "polySimp_rightDist" (formula "30") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                              (rule "mul_literals" (formula "30") (term "0,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                              (rule "mul_literals" (formula "17") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                              (rule "polyDiv_pullOut" (formula "16") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_2),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                              (rule "equal_literals" (formula "16") (term "0,0"))
                              (rule "ifthenelse_false" (formula "16") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
                              (rule "polySimp_homoEq" (formula "16"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0,0,1,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "16"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "30"))
                              (rule "mul_literals" (formula "25") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                              (rule "mul_literals" (formula "25") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                              (rule "leq_literals" (formula "25") (term "0,0"))
                              (rule "concrete_or_2" (formula "25") (term "0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "25") (term "0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0"))
                              (rule "leq_literals" (formula "25") (term "0"))
                              (rule "concrete_or_2" (formula "25"))
                              (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "22"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "add_literals" (formula "30") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "30") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "leq_literals" (formula "30") (term "0,0"))
                              (rule "concrete_or_2" (formula "30") (term "0"))
                              (rule "neg_literal" (formula "30") (term "0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "30") (term "0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "qeq_literals" (formula "30") (term "0"))
                              (rule "concrete_or_2" (formula "30"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = b_1 TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_1" (formula "10") (term "0,0"))
                                 (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_1" (formula "15") (term "0,0"))
                                 (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_1" (formula "12") (term "0,0"))
                                 (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "14") (term "0,0"))
                                 (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "13") (term "0,0"))
                                 (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "3"))
                                 (rule "ifthenelse_true" (formula "15") (term "0"))
                                 (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "15"))
                                 (rule "hideAuxiliaryEq" (formula "15"))
                                 (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "3"))
                                 (rule "concrete_and_3" (formula "36"))
                                 (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "36"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "replace_known_right" (formula "10") (term "0,1,0,0") (ifseqformula "35"))
                                 (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "10") (term "0,0"))
                                 (rule "applyEqRigid" (formula "7") (term "0,0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "8") (term "0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "8") (term "0,0"))
                                 (rule "replace_known_right" (formula "8") (term "1,0,0") (ifseqformula "38"))
                                 (rule "concrete_and_4" (formula "8") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "8") (term "0"))
                                 (rule "applyEqReverse" (formula "9") (term "2,0") (ifseqformula "8"))
                                 (rule "hideAuxiliaryEq" (formula "8"))
                                 (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "ifthenelse_same_branches" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEqRigid" (formula "7") (term "0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "5") (term "0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "5") (term "0,0"))
                                 (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "32"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "33") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectType" (formula "33") (term "0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "4") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "4") (term "1,0,0,0") (ifseqformula "29"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "27") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = b_1 FALSE"
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "35"))
                                 (rule "ifthenelse_false" (formula "13") (term "0"))
                                 (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "13"))
                                 (rule "hideAuxiliaryEq" (formula "13"))
                                 (rule "cut_direct" (formula "35") (term "1"))
                                 (branch "CUT: o_0 = b_1 TRUE"
                                    (rule "concrete_and_3" (formula "36"))
                                    (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "36"))
                                    (rule "concrete_and_2" (formula "6") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "6") (term "0"))
                                    (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "12") (term "0,0"))
                                    (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "5") (term "0,0"))
                                    (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "3") (term "0,0"))
                                    (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "11") (term "0,0"))
                                    (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "4") (term "0,0"))
                                    (rule "replace_known_right" (formula "9") (term "0,1,0,0") (ifseqformula "35"))
                                    (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "9") (term "0,0"))
                                    (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "1"))
                                    (rule "concrete_and_3" (formula "34"))
                                    (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "34"))
                                    (rule "concrete_and_2" (formula "10") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "10") (term "0"))
                                    (rule "applyEqReverse" (formula "11") (term "2,0") (ifseqformula "10"))
                                    (rule "hideAuxiliaryEq" (formula "10"))
                                    (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "33"))
                                    (rule "concrete_and_2" (formula "8") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "8") (term "0"))
                                    (rule "applyEqReverse" (formula "9") (term "2,0") (ifseqformula "8"))
                                    (rule "hideAuxiliaryEq" (formula "8"))
                                    (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "8") (term "0,0,0"))
                                    (rule "sortsDisjointModuloNull" (formula "8") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "8") (term "0,0,0,0") (ifseqformula "35"))
                                    (rule "concrete_and_2" (formula "8") (term "0,0,0"))
                                    (rule "concrete_and_2" (formula "8") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "8") (term "0"))
                                    (rule "applyEqReverse" (formula "9") (term "2,0") (ifseqformula "8"))
                                    (rule "hideAuxiliaryEq" (formula "8"))
                                    (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "7") (term "1,0,0"))
                                    (rule "sortsDisjointModuloNull" (formula "7") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "7") (term "0,1,0,0") (ifseqformula "34"))
                                    (rule "concrete_and_2" (formula "7") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "7") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "7") (term "0"))
                                    (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                    (rule "hideAuxiliaryEq" (formula "7"))
                                    (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "6") (term "1,0,0"))
                                    (rule "sortsDisjointModuloNull" (formula "6") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "6") (term "1,1,0,0") (ifseqformula "35"))
                                    (rule "concrete_and_4" (formula "6") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "6") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "6") (term "0"))
                                    (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "33") (ifseqformula "2"))
                                 )
                                 (branch "CUT: o_0 = b_1 FALSE"
                                    (rule "concrete_and_4" (formula "36"))
                                    (rule "false_right" (formula "36"))
                                    (rule "replace_known_right" (formula "11") (term "1,0,0") (ifseqformula "35"))
                                    (rule "concrete_and_4" (formula "11") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "11") (term "0"))
                                    (rule "applyEqReverse" (formula "12") (term "2,0") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "replace_known_right" (formula "11") (term "1,0,0") (ifseqformula "34"))
                                    (rule "concrete_and_4" (formula "11") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "11") (term "0"))
                                    (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "33"))
                                    (rule "concrete_and_4" (formula "3") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "3") (term "0"))
                                    (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "32"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "31"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "30"))
                                    (rule "concrete_and_4" (formula "29"))
                                    (rule "false_right" (formula "29"))
                                    (rule "div_axiom" (formula "27") (term "0,1,1") (inst "quotient=quotient_3"))
                                    (rule "qeq_literals" (formula "27") (term "0,1,1"))
                                    (rule "ifthenelse_true_for" (formula "27") (term "1,1"))
                                    (rule "equal_literals" (formula "27") (term "0"))
                                    (rule "concrete_or_2" (formula "27"))
                                    (rule "mul_literals" (formula "27") (term "1,1,1"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
                                    (rule "add_literals" (formula "29") (term "0,0,1"))
                                    (rule "polySimp_addComm1" (formula "29") (term "1"))
                                    (rule "add_literals" (formula "29") (term "0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "28"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "28") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "29"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0"))
                                    (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "27"))
                                    (rule "inEqSimp_homoInEq1" (formula "10"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0"))
                                    (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "27"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "applyEqRigid" (formula "6") (term "0,1,1,1,0,1,0,0,0") (ifseqformula "27"))
                                    (rule "polySimp_addComm0" (formula "6") (term "1,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "30") (term "0,1,1") (ifseqformula "27"))
                                    (rule "polySimp_addComm0" (formula "30") (term "1"))
                                    (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "27"))
                                    (rule "applyEq" (formula "11") (term "0,1,1") (ifseqformula "27"))
                                    (rule "polySimp_addComm1" (formula "11") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                    (rule "mul_literals" (formula "28") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                                    (rule "mul_literals" (formula "29") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                    (rule "mul_literals" (formula "10") (term "0,1"))
                                    (rule "inEqSimp_subsumption0" (formula "29") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0"))
                                    (rule "qeq_literals" (formula "29") (term "0"))
                                    (rule "concrete_or_1" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "8"))
                                    (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                                    (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0"))
                                    (rule "qeq_literals" (formula "28") (term "0"))
                                    (rule "concrete_or_1" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "10"))
                                    (rule "mul_literals" (formula "18") (term "0,0"))
                                    (rule "add_zero_left" (formula "18") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                    (rule "mul_literals" (formula "18") (term "1"))
                                    (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                                    (rule "leq_literals" (formula "18") (term "0,0"))
                                    (rule "concrete_or_2" (formula "18") (term "0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0"))
                                    (rule "leq_literals" (formula "18") (term "0"))
                                    (rule "concrete_or_2" (formula "18"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "24"))
                                    (rule "polySimp_mulAssoc" (formula "8") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                                    (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0"))
                                    (rule "concrete_or_2" (formula "8") (term "0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "qeq_literals" (formula "8") (term "0"))
                                    (rule "concrete_or_2" (formula "8"))
                                    (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "8"))
                                    (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "applyEq" (formula "8") (term "0") (ifseqformula "19"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "applyEqRigid" (formula "8") (term "0,1") (ifseqformula "18"))
                                    (rule "times_zero_2" (formula "8") (term "1"))
                                    (rule "applyEqRigid" (formula "9") (term "0,1,1") (ifseqformula "17"))
                                    (rule "times_zero_2" (formula "9") (term "1,1"))
                                    (rule "add_literals" (formula "9") (term "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,1,1,0,1,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "6") (term "0,1,1,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "1,1,0,1,0,0,0"))
                                    (rule "applyEqRigid" (formula "27") (term "1") (ifseqformula "17"))
                                    (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "17"))
                                    (rule "add_literals" (formula "8") (term "1"))
                                    (rule "applyEqRigid" (formula "10") (term "0,1,0,1") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "10") (term "1,0,1"))
                                    (rule "add_literals" (formula "10") (term "0,1"))
                                    (rule "applyEqRigid" (formula "28") (term "0,0,1") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "28") (term "0,1"))
                                    (rule "add_zero_left" (formula "28") (term "1"))
                                    (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                    (rule "concrete_or_1" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "div_axiom" (formula "8") (term "0") (inst "quotient=quotient_4"))
                                    (rule "qeq_literals" (formula "8") (term "0,1,1"))
                                    (rule "ifthenelse_true_for" (formula "8") (term "1,1"))
                                    (rule "equal_literals" (formula "8") (term "0"))
                                    (rule "concrete_or_2" (formula "8"))
                                    (rule "mul_literals" (formula "8") (term "1,1,1"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,1"))
                                    (rule "add_literals" (formula "10") (term "0,0,1"))
                                    (rule "polySimp_addComm1" (formula "10") (term "1"))
                                    (rule "add_literals" (formula "10") (term "0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "9"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "9") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "10"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0"))
                                    (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "11"))
                                    (rule "eqSymm" (formula "8"))
                                    (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "8"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0"))
                                    (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "8"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                    (rule "mul_literals" (formula "10") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                    (rule "mul_literals" (formula "9") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                    (rule "concrete_or_1" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "24"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                    (rule "concrete_or_1" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_1" (formula "7") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "7") (term "0,1,0,0") (ifseqformula "2"))
                                       (rule "concrete_not_1" (formula "7") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "7") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "7") (term "0"))
                                       (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                       (rule "hideAuxiliaryEq" (formula "7"))
                                       (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "5") (term "0,0"))
                                       (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "6") (term "0,0"))
                                       (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "4") (term "0,0"))
                                       (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "7") (term "0,0"))
                                       (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "5") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "5") (term "0"))
                                       (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "5") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "5") (term "0"))
                                       (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "4") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                       (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                       (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "26") (term "0") (ifseqformula "3"))
                                       (rule "sortsDisjointModuloNull" (formula "26"))
                                       (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "30"))
                                       (rule "concrete_and_4" (formula "26"))
                                       (rule "false_right" (formula "26"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "close" (formula "26") (ifseqformula "1"))
                                    )
                                    (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "7") (term "0,0"))
                                          (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_1" (formula "6") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "5") (term "0,0"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "4") (term "0,0"))
                                          (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "30"))
                                          (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "30"))
                                          (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "6") (term "0,0"))
                                          (rule "applyEqRigid" (formula "37") (term "2,0") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "37") (term "0") (ifseqformula "13"))
                                          (rule "eqSymm" (formula "37"))
                                          (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "4") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "4") (term "0"))
                                          (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "29"))
                                          (rule "false_right" (formula "29"))
                                          (rule "applyEqRigid" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "5") (term "0,0,0,0,0"))
                                          (rule "concrete_and_2" (formula "5") (term "0,0,0,0"))
                                          (rule "concrete_and_2" (formula "5") (term "0,0,0"))
                                          (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "4") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "4") (term "0"))
                                          (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                          (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                          (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "4") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "4") (term "0"))
                                          (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "eqSymm" (formula "32"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "3"))
                                          (rule "sortsDisjointModuloNull" (formula "26"))
                                          (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "28"))
                                          (rule "concrete_and_2" (formula "26"))
                                          (rule "false_right" (formula "26"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "close" (formula "26") (ifseqformula "1"))
                                       )
                                       (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 FALSE"
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                             (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                             (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "5") (term "0,0"))
                                             (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                             (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "29"))
                                             (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "29"))
                                             (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "4") (term "0,0"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "28"))
                                             (rule "applyEqRigid" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "4") (term "0,0,0,0,0"))
                                             (rule "concrete_and_2" (formula "4") (term "0,0,0,0"))
                                             (rule "concrete_and_2" (formula "4") (term "0,0,0"))
                                             (rule "applyEq" (formula "28") (term "0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "28"))
                                             (rule "false_right" (formula "28"))
                                             (rule "applyEqRigid" (formula "28") (term "0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "28"))
                                             (rule "false_right" (formula "28"))
                                             (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "5") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "5") (term "0"))
                                             (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "5"))
                                             (rule "hideAuxiliaryEq" (formula "5"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                             (rule "close" (formula "28") (ifseqformula "1"))
                                          )
                                          (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 FALSE"
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                                                (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                (rule "concrete_and_3" (formula "5") (term "0,0"))
                                                (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "2"))
                                                (rule "ifthenelse_true" (formula "5") (term "0"))
                                                (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "3"))
                                                (rule "concrete_and_3" (formula "27"))
                                                (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "3"))
                                                (rule "concrete_and_3" (formula "29"))
                                                (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "29"))
                                                (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                                (rule "concrete_and_3" (formula "4") (term "0,0"))
                                                (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "3"))
                                                (rule "concrete_and_3" (formula "28"))
                                                (rule "applyEq" (formula "30") (term "0") (ifseqformula "3"))
                                                (rule "sortsDisjointModuloNull" (formula "30"))
                                                (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "32"))
                                                (rule "concrete_and_2" (formula "30"))
                                                (rule "false_right" (formula "30"))
                                                (rule "applyEqRigid" (formula "35") (term "2,0") (ifseqformula "2"))
                                                (rule "narrowSelectType" (formula "35") (term "0") (ifseqformula "10"))
                                                (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                (rule "close" (formula "30") (ifseqformula "1"))
                                             )
                                             (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "26"))
                                                (rule "ifthenelse_false" (formula "3") (term "0"))
                                                (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch " o_0 = x_arr_3 & exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= quotient_2) & !f_0 = java.lang.Object::<created> TRUE"
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "notLeft" (formula "4"))
                                                   (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "eqSymm" (formula "3"))
                                                   (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "28"))
                                                   (rule "concrete_and_2" (formula "32"))
                                                   (rule "false_right" (formula "32"))
                                                   (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "2"))
                                                   (rule "concrete_and_3" (formula "30"))
                                                   (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "2"))
                                                   (rule "concrete_and_3" (formula "29"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "2"))
                                                   (rule "concrete_and_3" (formula "31"))
                                                   (rule "applyEq" (formula "29") (term "0") (ifseqformula "3"))
                                                   (rule "equalUnique" (formula "29"))
                                                   (rule "false_right" (formula "29"))
                                                   (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "3"))
                                                   (rule "equalUnique" (formula "29"))
                                                   (rule "false_right" (formula "29"))
                                                   (rule "applyEq" (formula "28") (term "0") (ifseqformula "3"))
                                                   (rule "equalUnique" (formula "28"))
                                                   (rule "false_right" (formula "28"))
                                                   (rule "applyEq" (formula "34") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                                   (rule "close" (formula "30") (ifseqformula "1"))
                                                )
                                                (branch " o_0 = x_arr_3 & exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= quotient_2) & !f_0 = java.lang.Object::<created> FALSE"
                                                   (rule "close" (formula "36") (ifseqformula "2"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch "Null Reference (self_1 = null)"
                  (rule "false_right" (formula "21"))
                  (rule "expand_inInt" (formula "8"))
                  (rule "expand_inInt" (formula "11"))
                  (rule "expand_inInt" (formula "3"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "replace_int_MIN" (formula "8") (term "0,1"))
                  (rule "replace_int_MAX" (formula "8") (term "1,0"))
                  (rule "replace_int_MIN" (formula "11") (term "0,1"))
                  (rule "replace_int_MAX" (formula "11") (term "1,0"))
                  (rule "replace_int_MIN" (formula "3") (term "0,1"))
                  (rule "replace_int_MAX" (formula "3") (term "1,0"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "3"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "close" (formula "23") (ifseqformula "1"))
               )
            )
            (branch "Null Reference (b_2 = null)"
               (rule "false_right" (formula "21"))
               (rule "expand_inInt" (formula "8"))
               (rule "expand_inInt" (formula "11"))
               (rule "expand_inInt" (formula "3"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "replace_int_MAX" (formula "8") (term "1,0"))
               (rule "replace_int_MIN" (formula "8") (term "0,1"))
               (rule "replace_int_MIN" (formula "11") (term "0,1"))
               (rule "replace_int_MAX" (formula "11") (term "1,0"))
               (rule "replace_int_MAX" (formula "3") (term "1,0"))
               (rule "replace_int_MIN" (formula "3") (term "0,1"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "3"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "close" (formula "23") (ifseqformula "1"))
            )
         )
         (branch "Null Reference (newObject = null)"
            (rule "false_right" (formula "21"))
            (rule "expand_inInt" (formula "8"))
            (rule "expand_inInt" (formula "11"))
            (rule "expand_inInt" (formula "3"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "replace_int_MAX" (formula "8") (term "1,0"))
            (rule "replace_int_MIN" (formula "8") (term "0,1"))
            (rule "replace_int_MIN" (formula "11") (term "0,1"))
            (rule "replace_int_MAX" (formula "11") (term "1,0"))
            (rule "replace_int_MAX" (formula "3") (term "1,0"))
            (rule "replace_int_MIN" (formula "3") (term "0,1"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "3"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "close" (formula "19") (ifseqformula "1"))
         )
      )
   )
   (branch "Exceptional Post (wordIndex)"
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate2" (formula "6") (term "1"))
      (rule "andLeft" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "notLeft" (formula "6"))
      (rule "close" (formula "9") (ifseqformula "8"))
   )
   (branch "Pre (wordIndex)"
      (rule "expand_inInt" (formula "9") (term "1,1,1,1"))
      (rule "expand_inInt" (formula "3"))
      (rule "replace_int_MIN" (formula "9") (term "0,1,1,1,1,1"))
      (rule "replace_int_MAX" (formula "9") (term "1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "3") (term "1,0"))
      (rule "replace_int_MIN" (formula "3") (term "0,1"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate2" (formula "9") (term "1"))
      (rule "andLeft" (formula "3"))
      (rule "applyOnRigidFormula" (formula "10"))
      (rule "simplifyUpdate2" (formula "10") (term "0"))
      (rule "inEqSimp_ltRight" (formula "7"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "applyOnRigidFormula" (formula "9") (term "1"))
      (rule "simplifyUpdate2" (formula "9") (term "1,1"))
      (rule "simplifyUpdate2" (formula "9") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "9") (term "0"))
      (rule "simplifyUpdate1" (formula "9") (term "1,0"))
      (rule "applyOnPV" (formula "9") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "9") (term "1,1"))
      (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
      (rule "applyOnPV" (formula "9") (term "0,0,1"))
      (rule "wellFormedStorePrimitive" (formula "9") (term "0,1"))
      (rule "wellFormedStorePrimitive" (formula "9") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "9") (term "0,1,1"))
      (rule "applyOnPV" (formula "9") (term "0,0,1,1"))
      (rule "simplifyUpdate1" (formula "9") (term "1,0,1,1"))
      (rule "applyOnRigidFormula" (formula "9") (term "1,1,1"))
      (rule "applyOnPV" (formula "9") (term "1,1,1,1"))
      (rule "simplifyUpdate1" (formula "9") (term "0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "4"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1"))
      (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
      (rule "leq_literals" (formula "4") (term "0"))
      (rule "concrete_or_1" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "wellFormedStoreObject" (formula "8") (term "0,1"))
      (rule "instanceof_not_compatible" (formula "8") (term "1,1,1,0,1"))
      (rule "wellFormedStorePrimitive" (formula "8") (term "0,0,1"))
      (rule "wellFormedCreate" (formula "8") (term "0,0,1"))
      (rule "eqClose" (formula "8") (term "0,1,0,1"))
      (rule "concrete_or_1" (formula "8") (term "1,0,1"))
      (rule "concrete_and_3" (formula "8") (term "0,1"))
      (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "2"))
      (rule "concrete_and_1" (formula "8") (term "1"))
      (rule "expand_subJint" (formula "8") (term "0,0"))
      (rule "polySimp_elimSub" (formula "8") (term "0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
      (rule "expand_subJint" (formula "8") (term "0,1,1"))
      (rule "polySimp_elimSub" (formula "8") (term "0,0,1,1"))
      (rule "mul_literals" (formula "8") (term "1,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,1,1"))
      (rule "expand_subJint" (formula "8") (term "0,0,1"))
      (rule "polySimp_elimSub" (formula "8") (term "0,0,0,1"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,1"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1"))
      (rule "expand_moduloInteger" (formula "8") (term "0,0"))
      (rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,0,0"))
      (rule "replace_int_MIN" (formula "8") (term "0,0,0"))
      (rule "replace_int_RANGE" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0"))
      (rule "mod_axiom" (formula "8") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,0"))
      (rule "expand_moduloInteger" (formula "8") (term "0,1,1"))
      (rule "replace_int_RANGE" (formula "8") (term "1,1,0,1,1"))
      (rule "replace_int_MIN" (formula "8") (term "0,0,1,1"))
      (rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,0,1,1"))
      (rule "add_literals" (formula "8") (term "0,0,1,0,1,1"))
      (rule "inEqSimp_homoInEq1" (formula "8") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,1,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,1"))
      (rule "add_literals" (formula "8") (term "0,0,1,1"))
      (rule "add_zero_left" (formula "8") (term "0,1,1"))
      (rule "mod_axiom" (formula "8") (term "0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,1,1"))
      (rule "polySimp_rightDist" (formula "8") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,1"))
      (rule "polySimp_rightDist" (formula "8") (term "0,0,1,1"))
      (rule "mul_literals" (formula "8") (term "0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,1"))
      (rule "mul_literals" (formula "8") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1"))
      (rule "expand_moduloInteger" (formula "8") (term "0,0,1"))
      (rule "replace_int_MIN" (formula "8") (term "0,0,0,1"))
      (rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,0,0,1"))
      (rule "replace_int_RANGE" (formula "8") (term "1,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,1,0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,0,1"))
      (rule "mod_axiom" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
      (rule "shift_paren_and" (formula "8"))
      (rule "commute_and" (formula "8") (term "0"))
      (rule "inEqSimp_and_subsumption1" (formula "8"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "8") (term "0,0,1"))
      (rule "qeq_literals" (formula "8") (term "0,1"))
      (rule "concrete_or_1" (formula "8") (term "1"))
      (rule "concrete_and_3" (formula "8"))
      (rule "div_axiom" (formula "8") (term "0,0,1") (inst "quotient=quotient_0"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
      (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
      (rule "equal_literals" (formula "1") (term "0"))
      (rule "concrete_or_2" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1,1,1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "11") (term "0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0"))
      (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
      (rule "concrete_and_1" (formula "11"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
      (rule "add_literals" (formula "4") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "4") (term "1,0,0"))
      (rule "add_zero_right" (formula "4") (term "0,0"))
      (rule "qeq_literals" (formula "4") (term "0"))
      (rule "concrete_or_1" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
      (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "3") (term "0,0"))
      (rule "concrete_or_2" (formula "3") (term "0"))
      (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0"))
      (rule "qeq_literals" (formula "3") (term "0"))
      (rule "concrete_or_2" (formula "3"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
      (rule "times_zero_1" (formula "9") (term "0,0"))
      (rule "add_zero_left" (formula "9") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1"))
      (rule "inEqSimp_contradInEq3" (formula "9") (ifseqformula "3"))
      (rule "times_zero_1" (formula "9") (term "0,1,0"))
      (rule "greater_literals" (formula "9") (term "0,0"))
      (rule "concrete_impl_1" (formula "9") (term "0"))
      (rule "qeq_literals" (formula "9") (term "0"))
      (rule "concrete_and_2" (formula "9"))
      (rule "closeFalse" (formula "9"))
   )
)
)
}
